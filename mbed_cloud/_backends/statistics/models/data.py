# coding: utf-8

"""
    mbed Cloud Connector Statistics REST API

    mbed Cloud Connector Statistics REST API provides statistics about other cloud services through defined counters.

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bootstrap_certificate_create=None, connector_ca_rest_api_count=None, bootstraps_failed=None, connector_ca_rest_api_error_count=None, connector_full_credentials_get=None, bootstrap_certificate_delete=None, timestamp=None, bootstraps_pending=None, connector_certificate_create=None, bootstrap_full_credentials_get=None, connector_certificate_delete=None, connector_credentials_get=None, bootstrap_credentials_get=None, bootstraps_successful=None):
        """
        Data - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bootstrap_certificate_create': 'int',
            'connector_ca_rest_api_count': 'int',
            'bootstraps_failed': 'int',
            'connector_ca_rest_api_error_count': 'int',
            'connector_full_credentials_get': 'int',
            'bootstrap_certificate_delete': 'int',
            'timestamp': 'str',
            'bootstraps_pending': 'int',
            'connector_certificate_create': 'int',
            'bootstrap_full_credentials_get': 'int',
            'connector_certificate_delete': 'int',
            'connector_credentials_get': 'int',
            'bootstrap_credentials_get': 'int',
            'bootstraps_successful': 'int'
        }

        self.attribute_map = {
            'bootstrap_certificate_create': 'bootstrap_certificate_create',
            'connector_ca_rest_api_count': 'connector_ca_rest_api_count',
            'bootstraps_failed': 'bootstraps_failed',
            'connector_ca_rest_api_error_count': 'connector_ca_rest_api_error_count',
            'connector_full_credentials_get': 'connector_full_credentials_get',
            'bootstrap_certificate_delete': 'bootstrap_certificate_delete',
            'timestamp': 'timestamp',
            'bootstraps_pending': 'bootstraps_pending',
            'connector_certificate_create': 'connector_certificate_create',
            'bootstrap_full_credentials_get': 'bootstrap_full_credentials_get',
            'connector_certificate_delete': 'connector_certificate_delete',
            'connector_credentials_get': 'connector_credentials_get',
            'bootstrap_credentials_get': 'bootstrap_credentials_get',
            'bootstraps_successful': 'bootstraps_successful'
        }

        self._bootstrap_certificate_create = bootstrap_certificate_create
        self._connector_ca_rest_api_count = connector_ca_rest_api_count
        self._bootstraps_failed = bootstraps_failed
        self._connector_ca_rest_api_error_count = connector_ca_rest_api_error_count
        self._connector_full_credentials_get = connector_full_credentials_get
        self._bootstrap_certificate_delete = bootstrap_certificate_delete
        self._timestamp = timestamp
        self._bootstraps_pending = bootstraps_pending
        self._connector_certificate_create = connector_certificate_create
        self._bootstrap_full_credentials_get = bootstrap_full_credentials_get
        self._connector_certificate_delete = connector_certificate_delete
        self._connector_credentials_get = connector_credentials_get
        self._bootstrap_credentials_get = bootstrap_credentials_get
        self._bootstraps_successful = bootstraps_successful

    @property
    def bootstrap_certificate_create(self):
        """
        Gets the bootstrap_certificate_create of this Data.
        Number of successful bootstrap certificate create requests account has used.

        :return: The bootstrap_certificate_create of this Data.
        :rtype: int
        """
        return self._bootstrap_certificate_create

    @bootstrap_certificate_create.setter
    def bootstrap_certificate_create(self, bootstrap_certificate_create):
        """
        Sets the bootstrap_certificate_create of this Data.
        Number of successful bootstrap certificate create requests account has used.

        :param bootstrap_certificate_create: The bootstrap_certificate_create of this Data.
        :type: int
        """

        self._bootstrap_certificate_create = bootstrap_certificate_create

    @property
    def connector_ca_rest_api_count(self):
        """
        Gets the connector_ca_rest_api_count of this Data.
        Number of suuccessful connector rest API requests account has used.

        :return: The connector_ca_rest_api_count of this Data.
        :rtype: int
        """
        return self._connector_ca_rest_api_count

    @connector_ca_rest_api_count.setter
    def connector_ca_rest_api_count(self, connector_ca_rest_api_count):
        """
        Sets the connector_ca_rest_api_count of this Data.
        Number of suuccessful connector rest API requests account has used.

        :param connector_ca_rest_api_count: The connector_ca_rest_api_count of this Data.
        :type: int
        """

        self._connector_ca_rest_api_count = connector_ca_rest_api_count

    @property
    def bootstraps_failed(self):
        """
        Gets the bootstraps_failed of this Data.
        Number of failed bootstraps account has used.

        :return: The bootstraps_failed of this Data.
        :rtype: int
        """
        return self._bootstraps_failed

    @bootstraps_failed.setter
    def bootstraps_failed(self, bootstraps_failed):
        """
        Sets the bootstraps_failed of this Data.
        Number of failed bootstraps account has used.

        :param bootstraps_failed: The bootstraps_failed of this Data.
        :type: int
        """

        self._bootstraps_failed = bootstraps_failed

    @property
    def connector_ca_rest_api_error_count(self):
        """
        Gets the connector_ca_rest_api_error_count of this Data.
        Number of failed connector rest API requests account has used.

        :return: The connector_ca_rest_api_error_count of this Data.
        :rtype: int
        """
        return self._connector_ca_rest_api_error_count

    @connector_ca_rest_api_error_count.setter
    def connector_ca_rest_api_error_count(self, connector_ca_rest_api_error_count):
        """
        Sets the connector_ca_rest_api_error_count of this Data.
        Number of failed connector rest API requests account has used.

        :param connector_ca_rest_api_error_count: The connector_ca_rest_api_error_count of this Data.
        :type: int
        """

        self._connector_ca_rest_api_error_count = connector_ca_rest_api_error_count

    @property
    def connector_full_credentials_get(self):
        """
        Gets the connector_full_credentials_get of this Data.
        Number of successful connector full credentials get requests account has used.

        :return: The connector_full_credentials_get of this Data.
        :rtype: int
        """
        return self._connector_full_credentials_get

    @connector_full_credentials_get.setter
    def connector_full_credentials_get(self, connector_full_credentials_get):
        """
        Sets the connector_full_credentials_get of this Data.
        Number of successful connector full credentials get requests account has used.

        :param connector_full_credentials_get: The connector_full_credentials_get of this Data.
        :type: int
        """

        self._connector_full_credentials_get = connector_full_credentials_get

    @property
    def bootstrap_certificate_delete(self):
        """
        Gets the bootstrap_certificate_delete of this Data.
        Number of successful bootstrap certificate delete requests account has used.

        :return: The bootstrap_certificate_delete of this Data.
        :rtype: int
        """
        return self._bootstrap_certificate_delete

    @bootstrap_certificate_delete.setter
    def bootstrap_certificate_delete(self, bootstrap_certificate_delete):
        """
        Sets the bootstrap_certificate_delete of this Data.
        Number of successful bootstrap certificate delete requests account has used.

        :param bootstrap_certificate_delete: The bootstrap_certificate_delete of this Data.
        :type: int
        """

        self._bootstrap_certificate_delete = bootstrap_certificate_delete

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Data.
        UTC time in RFC3339 format

        :return: The timestamp of this Data.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Data.
        UTC time in RFC3339 format

        :param timestamp: The timestamp of this Data.
        :type: str
        """

        self._timestamp = timestamp

    @property
    def bootstraps_pending(self):
        """
        Gets the bootstraps_pending of this Data.
        Number of pending bootstraps account has used.

        :return: The bootstraps_pending of this Data.
        :rtype: int
        """
        return self._bootstraps_pending

    @bootstraps_pending.setter
    def bootstraps_pending(self, bootstraps_pending):
        """
        Sets the bootstraps_pending of this Data.
        Number of pending bootstraps account has used.

        :param bootstraps_pending: The bootstraps_pending of this Data.
        :type: int
        """

        self._bootstraps_pending = bootstraps_pending

    @property
    def connector_certificate_create(self):
        """
        Gets the connector_certificate_create of this Data.
        Number of successful connector certificate create requests account has used.

        :return: The connector_certificate_create of this Data.
        :rtype: int
        """
        return self._connector_certificate_create

    @connector_certificate_create.setter
    def connector_certificate_create(self, connector_certificate_create):
        """
        Sets the connector_certificate_create of this Data.
        Number of successful connector certificate create requests account has used.

        :param connector_certificate_create: The connector_certificate_create of this Data.
        :type: int
        """

        self._connector_certificate_create = connector_certificate_create

    @property
    def bootstrap_full_credentials_get(self):
        """
        Gets the bootstrap_full_credentials_get of this Data.
        Number of successful bootstrap full credentials get requests account has used.

        :return: The bootstrap_full_credentials_get of this Data.
        :rtype: int
        """
        return self._bootstrap_full_credentials_get

    @bootstrap_full_credentials_get.setter
    def bootstrap_full_credentials_get(self, bootstrap_full_credentials_get):
        """
        Sets the bootstrap_full_credentials_get of this Data.
        Number of successful bootstrap full credentials get requests account has used.

        :param bootstrap_full_credentials_get: The bootstrap_full_credentials_get of this Data.
        :type: int
        """

        self._bootstrap_full_credentials_get = bootstrap_full_credentials_get

    @property
    def connector_certificate_delete(self):
        """
        Gets the connector_certificate_delete of this Data.
        Number of successful connector certificate create requests account has used.

        :return: The connector_certificate_delete of this Data.
        :rtype: int
        """
        return self._connector_certificate_delete

    @connector_certificate_delete.setter
    def connector_certificate_delete(self, connector_certificate_delete):
        """
        Sets the connector_certificate_delete of this Data.
        Number of successful connector certificate create requests account has used.

        :param connector_certificate_delete: The connector_certificate_delete of this Data.
        :type: int
        """

        self._connector_certificate_delete = connector_certificate_delete

    @property
    def connector_credentials_get(self):
        """
        Gets the connector_credentials_get of this Data.
        Number of successful connector credentials get requests account has used.

        :return: The connector_credentials_get of this Data.
        :rtype: int
        """
        return self._connector_credentials_get

    @connector_credentials_get.setter
    def connector_credentials_get(self, connector_credentials_get):
        """
        Sets the connector_credentials_get of this Data.
        Number of successful connector credentials get requests account has used.

        :param connector_credentials_get: The connector_credentials_get of this Data.
        :type: int
        """

        self._connector_credentials_get = connector_credentials_get

    @property
    def bootstrap_credentials_get(self):
        """
        Gets the bootstrap_credentials_get of this Data.
        Number of successful bootstrap credentials get requests account has used.

        :return: The bootstrap_credentials_get of this Data.
        :rtype: int
        """
        return self._bootstrap_credentials_get

    @bootstrap_credentials_get.setter
    def bootstrap_credentials_get(self, bootstrap_credentials_get):
        """
        Sets the bootstrap_credentials_get of this Data.
        Number of successful bootstrap credentials get requests account has used.

        :param bootstrap_credentials_get: The bootstrap_credentials_get of this Data.
        :type: int
        """

        self._bootstrap_credentials_get = bootstrap_credentials_get

    @property
    def bootstraps_successful(self):
        """
        Gets the bootstraps_successful of this Data.
        Number of successful bootstraps account has used.

        :return: The bootstraps_successful of this Data.
        :rtype: int
        """
        return self._bootstraps_successful

    @bootstraps_successful.setter
    def bootstraps_successful(self, bootstraps_successful):
        """
        Sets the bootstraps_successful of this Data.
        Number of successful bootstraps account has used.

        :param bootstraps_successful: The bootstraps_successful of this Data.
        :type: int
        """

        self._bootstraps_successful = bootstraps_successful

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
