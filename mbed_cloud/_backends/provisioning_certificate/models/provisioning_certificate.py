# coding: utf-8

"""
    Provisioning endpoints - provisioning certificates.

    A provisioning certificate is used to associate an mbed Cloud account with a specific installation of a Factory Tool. The certificate needs to be downloaded using this API and placed into the appropriate directory of the Factory Tool. 

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProvisioningCertificate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_at=None, provisioning_context_certificate=None, id=None, etag=None, object=None):
        """
        ProvisioningCertificate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_at': 'str',
            'provisioning_context_certificate': 'str',
            'id': 'str',
            'etag': 'str',
            'object': 'str'
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'provisioning_context_certificate': 'provisioning-context-certificate',
            'id': 'id',
            'etag': 'etag',
            'object': 'object'
        }

        self._created_at = created_at
        self._provisioning_context_certificate = provisioning_context_certificate
        self._id = id
        self._etag = etag
        self._object = object

    @property
    def created_at(self):
        """
        Gets the created_at of this ProvisioningCertificate.
        UTC time of the entity creation.

        :return: The created_at of this ProvisioningCertificate.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ProvisioningCertificate.
        UTC time of the entity creation.

        :param created_at: The created_at of this ProvisioningCertificate.
        :type: str
        """

        self._created_at = created_at

    @property
    def provisioning_context_certificate(self):
        """
        Gets the provisioning_context_certificate of this ProvisioningCertificate.
        The provisioning certificate.

        :return: The provisioning_context_certificate of this ProvisioningCertificate.
        :rtype: str
        """
        return self._provisioning_context_certificate

    @provisioning_context_certificate.setter
    def provisioning_context_certificate(self, provisioning_context_certificate):
        """
        Sets the provisioning_context_certificate of this ProvisioningCertificate.
        The provisioning certificate.

        :param provisioning_context_certificate: The provisioning_context_certificate of this ProvisioningCertificate.
        :type: str
        """

        self._provisioning_context_certificate = provisioning_context_certificate

    @property
    def id(self):
        """
        Gets the id of this ProvisioningCertificate.
        Entity ID.

        :return: The id of this ProvisioningCertificate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProvisioningCertificate.
        Entity ID.

        :param id: The id of this ProvisioningCertificate.
        :type: str
        """

        self._id = id

    @property
    def etag(self):
        """
        Gets the etag of this ProvisioningCertificate.
        Currently not used.

        :return: The etag of this ProvisioningCertificate.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """
        Sets the etag of this ProvisioningCertificate.
        Currently not used.

        :param etag: The etag of this ProvisioningCertificate.
        :type: str
        """

        self._etag = etag

    @property
    def object(self):
        """
        Gets the object of this ProvisioningCertificate.
        Currently not used.

        :return: The object of this ProvisioningCertificate.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this ProvisioningCertificate.
        Currently not used.

        :param object: The object of this ProvisioningCertificate.
        :type: str
        """

        self._object = object

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProvisioningCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
