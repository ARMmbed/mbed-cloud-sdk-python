# coding: utf-8

"""
    Provisioning endpoints - production line certificates.

    A producton line certificate is used to associate a specific installation of the Factory Tool with an mbed Cloud account.  The production line certificate is generated by the Factory Tool, and needs to be uploaded using these APIs. 

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def v3_production_line_certificates_get(self, authorization, **kwargs):
        """
        Gets the list of production line certificates associated with the account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_production_line_certificates_get(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: \"Bearer\" followed by the reference token or API key. (required)
        :return: AListOfProductionLineCertificates_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v3_production_line_certificates_get_with_http_info(authorization, **kwargs)
        else:
            (data) = self.v3_production_line_certificates_get_with_http_info(authorization, **kwargs)
            return data

    def v3_production_line_certificates_get_with_http_info(self, authorization, **kwargs):
        """
        Gets the list of production line certificates associated with the account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_production_line_certificates_get_with_http_info(authorization, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: \"Bearer\" followed by the reference token or API key. (required)
        :return: AListOfProductionLineCertificates_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_production_line_certificates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v3_production_line_certificates_get`")


        collection_formats = {}

        resource_path = '/v3/production-line-certificates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AListOfProductionLineCertificates_',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v3_production_line_certificates_muuid_delete(self, authorization, m_uuid, **kwargs):
        """
        Deactivates the production line certificate.  There is no way to reactivate it. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_production_line_certificates_muuid_delete(authorization, m_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: \"Bearer\" followed by the reference token or API key. (required)
        :param str m_uuid: Certificate mUUID (required)
        :return: ProductionLineCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v3_production_line_certificates_muuid_delete_with_http_info(authorization, m_uuid, **kwargs)
        else:
            (data) = self.v3_production_line_certificates_muuid_delete_with_http_info(authorization, m_uuid, **kwargs)
            return data

    def v3_production_line_certificates_muuid_delete_with_http_info(self, authorization, m_uuid, **kwargs):
        """
        Deactivates the production line certificate.  There is no way to reactivate it. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_production_line_certificates_muuid_delete_with_http_info(authorization, m_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: \"Bearer\" followed by the reference token or API key. (required)
        :param str m_uuid: Certificate mUUID (required)
        :return: ProductionLineCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'm_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_production_line_certificates_muuid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v3_production_line_certificates_muuid_delete`")
        # verify the required parameter 'm_uuid' is set
        if ('m_uuid' not in params) or (params['m_uuid'] is None):
            raise ValueError("Missing the required parameter `m_uuid` when calling `v3_production_line_certificates_muuid_delete`")


        collection_formats = {}

        resource_path = '/v3/production-line-certificates/{mUUID}'.replace('{format}', 'json')
        path_params = {}
        if 'm_uuid' in params:
            path_params['mUUID'] = params['m_uuid']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProductionLineCertificate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v3_production_line_certificates_muuid_get(self, authorization, m_uuid, **kwargs):
        """
        Gets a single production line certificate by its mUUID. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_production_line_certificates_muuid_get(authorization, m_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: \"Bearer\" followed by the reference token or API key. (required)
        :param str m_uuid: Certificate mUUID. (required)
        :return: ProductionLineCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v3_production_line_certificates_muuid_get_with_http_info(authorization, m_uuid, **kwargs)
        else:
            (data) = self.v3_production_line_certificates_muuid_get_with_http_info(authorization, m_uuid, **kwargs)
            return data

    def v3_production_line_certificates_muuid_get_with_http_info(self, authorization, m_uuid, **kwargs):
        """
        Gets a single production line certificate by its mUUID. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_production_line_certificates_muuid_get_with_http_info(authorization, m_uuid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: \"Bearer\" followed by the reference token or API key. (required)
        :param str m_uuid: Certificate mUUID. (required)
        :return: ProductionLineCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'm_uuid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_production_line_certificates_muuid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v3_production_line_certificates_muuid_get`")
        # verify the required parameter 'm_uuid' is set
        if ('m_uuid' not in params) or (params['m_uuid'] is None):
            raise ValueError("Missing the required parameter `m_uuid` when calling `v3_production_line_certificates_muuid_get`")


        collection_formats = {}

        resource_path = '/v3/production-line-certificates/{mUUID}'.replace('{format}', 'json')
        path_params = {}
        if 'm_uuid' in params:
            path_params['mUUID'] = params['m_uuid']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProductionLineCertificate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v3_production_line_certificates_muuid_put(self, authorization, m_uuid, body, **kwargs):
        """
        Updates the comment on a production line certificate. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_production_line_certificates_muuid_put(authorization, m_uuid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: \"Bearer\" followed by the reference token or API key. (required)
        :param str m_uuid: Certificate mUUID (required)
        :param Body1 body: (required)
        :return: ProductionLineCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v3_production_line_certificates_muuid_put_with_http_info(authorization, m_uuid, body, **kwargs)
        else:
            (data) = self.v3_production_line_certificates_muuid_put_with_http_info(authorization, m_uuid, body, **kwargs)
            return data

    def v3_production_line_certificates_muuid_put_with_http_info(self, authorization, m_uuid, body, **kwargs):
        """
        Updates the comment on a production line certificate. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_production_line_certificates_muuid_put_with_http_info(authorization, m_uuid, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: \"Bearer\" followed by the reference token or API key. (required)
        :param str m_uuid: Certificate mUUID (required)
        :param Body1 body: (required)
        :return: ProductionLineCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'm_uuid', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_production_line_certificates_muuid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v3_production_line_certificates_muuid_put`")
        # verify the required parameter 'm_uuid' is set
        if ('m_uuid' not in params) or (params['m_uuid'] is None):
            raise ValueError("Missing the required parameter `m_uuid` when calling `v3_production_line_certificates_muuid_put`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v3_production_line_certificates_muuid_put`")


        collection_formats = {}

        resource_path = '/v3/production-line-certificates/{mUUID}'.replace('{format}', 'json')
        path_params = {}
        if 'm_uuid' in params:
            path_params['mUUID'] = params['m_uuid']

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProductionLineCertificate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def v3_production_line_certificates_post(self, authorization, body, **kwargs):
        """
        Adds a new production line certificate to the account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_production_line_certificates_post(authorization, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: \"Bearer\" followed by the reference token or API key. (required)
        :param Body body: (required)
        :return: ProductionLineCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.v3_production_line_certificates_post_with_http_info(authorization, body, **kwargs)
        else:
            (data) = self.v3_production_line_certificates_post_with_http_info(authorization, body, **kwargs)
            return data

    def v3_production_line_certificates_post_with_http_info(self, authorization, body, **kwargs):
        """
        Adds a new production line certificate to the account. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v3_production_line_certificates_post_with_http_info(authorization, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: \"Bearer\" followed by the reference token or API key. (required)
        :param Body body: (required)
        :return: ProductionLineCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_production_line_certificates_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params) or (params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `v3_production_line_certificates_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `v3_production_line_certificates_post`")


        collection_formats = {}

        resource_path = '/v3/production-line-certificates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProductionLineCertificate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
