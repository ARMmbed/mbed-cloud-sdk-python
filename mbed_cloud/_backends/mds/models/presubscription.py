# coding: utf-8

"""
    mbed Cloud Connect REST API

    mbed Cloud Connect REST API allows web applications to communicate with devices.

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Presubscription(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, endpoint_name=None, endpoint_type=None, _resource_path=None):
        """
        Presubscription - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'endpoint_name': 'str',
            'endpoint_type': 'str',
            '_resource_path': 'list[ResourcePath]'
        }

        self.attribute_map = {
            'endpoint_name': 'endpoint-name',
            'endpoint_type': 'endpoint-type',
            '_resource_path': 'resource-path'
        }

        self._endpoint_name = endpoint_name
        self._endpoint_type = endpoint_type
        self.__resource_path = _resource_path

    @property
    def endpoint_name(self):
        """
        Gets the endpoint_name of this Presubscription.


        :return: The endpoint_name of this Presubscription.
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """
        Sets the endpoint_name of this Presubscription.


        :param endpoint_name: The endpoint_name of this Presubscription.
        :type: str
        """

        self._endpoint_name = endpoint_name

    @property
    def endpoint_type(self):
        """
        Gets the endpoint_type of this Presubscription.


        :return: The endpoint_type of this Presubscription.
        :rtype: str
        """
        return self._endpoint_type

    @endpoint_type.setter
    def endpoint_type(self, endpoint_type):
        """
        Sets the endpoint_type of this Presubscription.


        :param endpoint_type: The endpoint_type of this Presubscription.
        :type: str
        """

        self._endpoint_type = endpoint_type

    @property
    def _resource_path(self):
        """
        Gets the _resource_path of this Presubscription.


        :return: The _resource_path of this Presubscription.
        :rtype: list[ResourcePath]
        """
        return self.__resource_path

    @_resource_path.setter
    def _resource_path(self, _resource_path):
        """
        Sets the _resource_path of this Presubscription.


        :param _resource_path: The _resource_path of this Presubscription.
        :type: list[ResourcePath]
        """

        self.__resource_path = _resource_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
