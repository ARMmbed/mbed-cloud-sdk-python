# coding: utf-8

"""
    IAM Identities REST API

    REST API to manage accounts, groups, users and API keys

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RootAdminApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_account_certificate(self, account_id, body, **kwargs):
        """
        Upload new trusted certificate.
        An endpoint for uploading new trusted certificates.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_account_certificate(account_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param TrustedCertificateInternalReq body: A trusted certificate object with attributes, signature is optional. (required)
        :return: TrustedCertificateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_account_certificate_with_http_info(account_id, body, **kwargs)
        else:
            (data) = self.add_account_certificate_with_http_info(account_id, body, **kwargs)
            return data

    def add_account_certificate_with_http_info(self, account_id, body, **kwargs):
        """
        Upload new trusted certificate.
        An endpoint for uploading new trusted certificates.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_account_certificate_with_http_info(account_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param TrustedCertificateInternalReq body: A trusted certificate object with attributes, signature is optional. (required)
        :return: TrustedCertificateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_account_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `add_account_certificate`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_account_certificate`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/trusted-certificates'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TrustedCertificateResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_api_keys_to_account_group(self, account_id, group_id, body, **kwargs):
        """
        Add API keys to a group.
        An endpoint for adding API keys to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_api_keys_to_account_group(account_id, group_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be updated. (required)
        :param SubjectList body: A list of API keys to be added to the group. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_api_keys_to_account_group_with_http_info(account_id, group_id, body, **kwargs)
        else:
            (data) = self.add_api_keys_to_account_group_with_http_info(account_id, group_id, body, **kwargs)
            return data

    def add_api_keys_to_account_group_with_http_info(self, account_id, group_id, body, **kwargs):
        """
        Add API keys to a group.
        An endpoint for adding API keys to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_api_keys_to_account_group_with_http_info(account_id, group_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be updated. (required)
        :param SubjectList body: A list of API keys to be added to the group. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_api_keys_to_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `add_api_keys_to_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `add_api_keys_to_account_group`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_api_keys_to_account_group`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_subjects_to_account_group(self, account_id, group_id, body, **kwargs):
        """
        Add members to a group.
        An endpoint for adding users and API keys to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_subjects_to_account_group(account_id, group_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be updated. (required)
        :param SubjectList body: A list of users and API keys to be added to the group. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_subjects_to_account_group_with_http_info(account_id, group_id, body, **kwargs)
        else:
            (data) = self.add_subjects_to_account_group_with_http_info(account_id, group_id, body, **kwargs)
            return data

    def add_subjects_to_account_group_with_http_info(self, account_id, group_id, body, **kwargs):
        """
        Add members to a group.
        An endpoint for adding users and API keys to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_subjects_to_account_group_with_http_info(account_id, group_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be updated. (required)
        :param SubjectList body: A list of users and API keys to be added to the group. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_subjects_to_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `add_subjects_to_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `add_subjects_to_account_group`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_subjects_to_account_group`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups/{groupID}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def add_users_to_account_group(self, account_id, group_id, body, **kwargs):
        """
        Add users to a group.
        An endpoint for adding users to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_users_to_account_group(account_id, group_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be updated. (required)
        :param SubjectList body: A list of users to be added to the group. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_users_to_account_group_with_http_info(account_id, group_id, body, **kwargs)
        else:
            (data) = self.add_users_to_account_group_with_http_info(account_id, group_id, body, **kwargs)
            return data

    def add_users_to_account_group_with_http_info(self, account_id, group_id, body, **kwargs):
        """
        Add users to a group.
        An endpoint for adding users to groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_users_to_account_group_with_http_info(account_id, group_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be updated. (required)
        :param SubjectList body: A list of users to be added to the group. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_users_to_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `add_users_to_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `add_users_to_account_group`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_users_to_account_group`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups/{groupID}/users'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def admin_create_account(self, body, **kwargs):
        """
        Create a new account.
        An endpoint for creating a new account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_create_account(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccountCreationReq body: Details of the account to be created. (required)
        :return: AccountCreationResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.admin_create_account_with_http_info(body, **kwargs)
        else:
            (data) = self.admin_create_account_with_http_info(body, **kwargs)
            return data

    def admin_create_account_with_http_info(self, body, **kwargs):
        """
        Create a new account.
        An endpoint for creating a new account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_create_account_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccountCreationReq body: Details of the account to be created. (required)
        :return: AccountCreationResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_create_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_create_account`")


        collection_formats = {}

        resource_path = '/admin/v3/accounts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountCreationResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def admin_delete_account(self, account_id, **kwargs):
        """
        Delete an existing account.
        An endpoint for deleting an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_delete_account(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID of the account to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.admin_delete_account_with_http_info(account_id, **kwargs)
        else:
            (data) = self.admin_delete_account_with_http_info(account_id, **kwargs)
            return data

    def admin_delete_account_with_http_info(self, account_id, **kwargs):
        """
        Delete an existing account.
        An endpoint for deleting an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_delete_account_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID of the account to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_delete_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `admin_delete_account`")


        collection_formats = {}

        resource_path = '/admin/v3/accounts/{accountID}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def admin_delete_user(self, user_id, **kwargs):
        """
        Delete a user.
        An endpoint for deleting a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_delete_user(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The ID of the user to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.admin_delete_user_with_http_info(user_id, **kwargs)
        else:
            (data) = self.admin_delete_user_with_http_info(user_id, **kwargs)
            return data

    def admin_delete_user_with_http_info(self, user_id, **kwargs):
        """
        Delete a user.
        An endpoint for deleting a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_delete_user_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The ID of the user to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_delete_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `admin_delete_user`")


        collection_formats = {}

        resource_path = '/admin/v3/users/{user-id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def admin_get_account_info(self, account_id, **kwargs):
        """
        Get account info.
        Returns detailed information about the account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_get_account_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID or alias of the account to be fetched. (required)
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.admin_get_account_info_with_http_info(account_id, **kwargs)
        else:
            (data) = self.admin_get_account_info_with_http_info(account_id, **kwargs)
            return data

    def admin_get_account_info_with_http_info(self, account_id, **kwargs):
        """
        Get account info.
        Returns detailed information about the account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_get_account_info_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID or alias of the account to be fetched. (required)
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_get_account_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `admin_get_account_info`")


        collection_formats = {}

        resource_path = '/admin/v3/accounts/{accountID}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def admin_get_all_accounts(self, **kwargs):
        """
        Get all accounts.
        Returns an array of account objects, optionally filtered by status and tier level.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_get_all_accounts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED.
        :param str tier: An optional filter for tier level, must be 0, 1 or omitted.
        :param str parent: An optional filter for parent account ID.
        :param str status__eq: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED.
        :param str tier__eq: An optional filter for tier level, must be 0, 1 or omitted.
        :param str parent__eq: An optional filter for parent account ID.
        :param str filter__eq: An optional filter for aggregated accounts. Supported: aggregator, subtenant.
        :param str template__eq: An optional filter for account template ID.
        :param int limit: The number of results to return (2-1000). By default, it is unlimited.
        :param str after: The entity ID to fetch after the given one.
        :return: AccountInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.admin_get_all_accounts_with_http_info(**kwargs)
        else:
            (data) = self.admin_get_all_accounts_with_http_info(**kwargs)
            return data

    def admin_get_all_accounts_with_http_info(self, **kwargs):
        """
        Get all accounts.
        Returns an array of account objects, optionally filtered by status and tier level.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_get_all_accounts_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED.
        :param str tier: An optional filter for tier level, must be 0, 1 or omitted.
        :param str parent: An optional filter for parent account ID.
        :param str status__eq: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED.
        :param str tier__eq: An optional filter for tier level, must be 0, 1 or omitted.
        :param str parent__eq: An optional filter for parent account ID.
        :param str filter__eq: An optional filter for aggregated accounts. Supported: aggregator, subtenant.
        :param str template__eq: An optional filter for account template ID.
        :param int limit: The number of results to return (2-1000). By default, it is unlimited.
        :param str after: The entity ID to fetch after the given one.
        :return: AccountInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'tier', 'parent', 'status__eq', 'tier__eq', 'parent__eq', 'filter__eq', 'template__eq', 'limit', 'after']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_get_all_accounts" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/admin/v3/accounts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'status' in params:
            query_params['status'] = params['status']
        if 'tier' in params:
            query_params['tier'] = params['tier']
        if 'parent' in params:
            query_params['parent'] = params['parent']
        if 'status__eq' in params:
            query_params['status__eq'] = params['status__eq']
        if 'tier__eq' in params:
            query_params['tier__eq'] = params['tier__eq']
        if 'parent__eq' in params:
            query_params['parent__eq'] = params['parent__eq']
        if 'filter__eq' in params:
            query_params['filter__eq'] = params['filter__eq']
        if 'template__eq' in params:
            query_params['template__eq'] = params['template__eq']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountInfoList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def admin_get_user(self, user_id, **kwargs):
        """
        Details of a user.
        An endpoint for retrieving the details of a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_get_user(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The ID or name of the user whose details are retrieved. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.admin_get_user_with_http_info(user_id, **kwargs)
        else:
            (data) = self.admin_get_user_with_http_info(user_id, **kwargs)
            return data

    def admin_get_user_with_http_info(self, user_id, **kwargs):
        """
        Details of a user.
        An endpoint for retrieving the details of a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_get_user_with_http_info(user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str user_id: The ID or name of the user whose details are retrieved. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_get_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `admin_get_user`")


        collection_formats = {}

        resource_path = '/admin/v3/users/{user-id}'.replace('{format}', 'json')
        path_params = {}
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def admin_update_account(self, account_id, body, **kwargs):
        """
        Update attributes of an existing account.
        An endpoint for updating an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_update_account(account_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID of the account to be updated. (required)
        :param AccountUpdateRootReq body: Details of the account to be updated. (required)
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.admin_update_account_with_http_info(account_id, body, **kwargs)
        else:
            (data) = self.admin_update_account_with_http_info(account_id, body, **kwargs)
            return data

    def admin_update_account_with_http_info(self, account_id, body, **kwargs):
        """
        Update attributes of an existing account.
        An endpoint for updating an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.admin_update_account_with_http_info(account_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID of the account to be updated. (required)
        :param AccountUpdateRootReq body: Details of the account to be updated. (required)
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method admin_update_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `admin_update_account`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `admin_update_account`")


        collection_formats = {}

        resource_path = '/admin/v3/accounts/{accountID}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def change_account_user_password(self, account_id, user_id, body, **kwargs):
        """
        Change the password of a user.
        An endpoint for changing the user password. The old password is not checked.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.change_account_user_password(account_id, user_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user whose password is changed. (required)
        :param PasswordChangeReq body: New password only. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.change_account_user_password_with_http_info(account_id, user_id, body, **kwargs)
        else:
            (data) = self.change_account_user_password_with_http_info(account_id, user_id, body, **kwargs)
            return data

    def change_account_user_password_with_http_info(self, account_id, user_id, body, **kwargs):
        """
        Change the password of a user.
        An endpoint for changing the user password. The old password is not checked.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.change_account_user_password_with_http_info(account_id, user_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user whose password is changed. (required)
        :param PasswordChangeReq body: New password only. (required)
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_account_user_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `change_account_user_password`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `change_account_user_password`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_account_user_password`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/users/{user-id}/password'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def check_account_user_password(self, account_id, user_id, body, **kwargs):
        """
        Check the password of a user.
        An endpoint for checking user's current password.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.check_account_user_password(account_id, user_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user whose password is checked. (required)
        :param PasswordChangeReq body: Current password only. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.check_account_user_password_with_http_info(account_id, user_id, body, **kwargs)
        else:
            (data) = self.check_account_user_password_with_http_info(account_id, user_id, body, **kwargs)
            return data

    def check_account_user_password_with_http_info(self, account_id, user_id, body, **kwargs):
        """
        Check the password of a user.
        An endpoint for checking user's current password.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.check_account_user_password_with_http_info(account_id, user_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user whose password is checked. (required)
        :param PasswordChangeReq body: Current password only. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_account_user_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `check_account_user_password`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `check_account_user_password`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `check_account_user_password`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/users/{user-id}/password'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_account(self, body, **kwargs):
        """
        Create a new account.
        An endpoint for creating a new account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccountCreationReq body: Details of the account to be created. (required)
        :return: AccountCreationResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_account_with_http_info(body, **kwargs)
        else:
            (data) = self.create_account_with_http_info(body, **kwargs)
            return data

    def create_account_with_http_info(self, body, **kwargs):
        """
        Create a new account.
        An endpoint for creating a new account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccountCreationReq body: Details of the account to be created. (required)
        :return: AccountCreationResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account`")


        collection_formats = {}

        resource_path = '/v3/accounts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountCreationResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_account_api_key(self, account_id, body, **kwargs):
        """
        Create a new API key.
        An endpoint for creating a new API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account_api_key(account_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param ApiKeyInfoReq body: Details of the API key to be created. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_account_api_key_with_http_info(account_id, body, **kwargs)
        else:
            (data) = self.create_account_api_key_with_http_info(account_id, body, **kwargs)
            return data

    def create_account_api_key_with_http_info(self, account_id, body, **kwargs):
        """
        Create a new API key.
        An endpoint for creating a new API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account_api_key_with_http_info(account_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param ApiKeyInfoReq body: Details of the API key to be created. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_account_api_key`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account_api_key`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/api-keys'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_account_group(self, account_id, body, **kwargs):
        """
        Create a new group.
        An endpoint for creating a new group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account_group(account_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param GroupCreationInfo body: Details of the group to be created. (required)
        :return: GroupSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_account_group_with_http_info(account_id, body, **kwargs)
        else:
            (data) = self.create_account_group_with_http_info(account_id, body, **kwargs)
            return data

    def create_account_group_with_http_info(self, account_id, body, **kwargs):
        """
        Create a new group.
        An endpoint for creating a new group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account_group_with_http_info(account_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param GroupCreationInfo body: Details of the group to be created. (required)
        :return: GroupSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_account_group`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account_group`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupSummary',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_account_template(self, body, **kwargs):
        """
        Create a new account template.
        An endpoint for creating a new account template.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account_template(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccountTemplateReq body: Details of the account template to be created. (required)
        :return: AccountTemplateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_account_template_with_http_info(body, **kwargs)
        else:
            (data) = self.create_account_template_with_http_info(body, **kwargs)
            return data

    def create_account_template_with_http_info(self, body, **kwargs):
        """
        Create a new account template.
        An endpoint for creating a new account template.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account_template_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccountTemplateReq body: Details of the account template to be created. (required)
        :return: AccountTemplateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account_template`")


        collection_formats = {}

        resource_path = '/admin/v3/account-templates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountTemplateResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_account_user(self, account_id, body, **kwargs):
        """
        Create a new user.
        An endpoint for creating a new user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account_user(account_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param UserInfoReq body: A user object with attributes. (required)
        :param str action: Create or invite user.
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_account_user_with_http_info(account_id, body, **kwargs)
        else:
            (data) = self.create_account_user_with_http_info(account_id, body, **kwargs)
            return data

    def create_account_user_with_http_info(self, account_id, body, **kwargs):
        """
        Create a new user.
        An endpoint for creating a new user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account_user_with_http_info(account_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param UserInfoReq body: A user object with attributes. (required)
        :param str action: Create or invite user.
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body', 'action']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_account_user`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_account_user`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/users'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}
        if 'action' in params:
            query_params['action'] = params['action']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_account(self, account_id, **kwargs):
        """
        Delete an existing account.
        An endpoint for deleting an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID of the account to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_account_with_http_info(account_id, **kwargs)
        else:
            (data) = self.delete_account_with_http_info(account_id, **kwargs)
            return data

    def delete_account_with_http_info(self, account_id, **kwargs):
        """
        Delete an existing account.
        An endpoint for deleting an account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID of the account to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_account`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_account_api_key(self, account_id, api_key, **kwargs):
        """
        Delete the API key.
        An endpoint for deleting an API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_api_key(account_id, api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_account_api_key_with_http_info(account_id, api_key, **kwargs)
        else:
            (data) = self.delete_account_api_key_with_http_info(account_id, api_key, **kwargs)
            return data

    def delete_account_api_key_with_http_info(self, account_id, api_key, **kwargs):
        """
        Delete the API key.
        An endpoint for deleting an API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_api_key_with_http_info(account_id, api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_account_api_key`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `delete_account_api_key`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/api-keys/{apiKey}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_account_certificate(self, account_id, cert_id, **kwargs):
        """
        Delete trusted certificate by ID.
        An endpoint for deleting the trusted certificate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_certificate(account_id, cert_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID of the trusted certificate to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_account_certificate_with_http_info(account_id, cert_id, **kwargs)
        else:
            (data) = self.delete_account_certificate_with_http_info(account_id, cert_id, **kwargs)
            return data

    def delete_account_certificate_with_http_info(self, account_id, cert_id, **kwargs):
        """
        Delete trusted certificate by ID.
        An endpoint for deleting the trusted certificate.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_certificate_with_http_info(account_id, cert_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID of the trusted certificate to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cert_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_account_certificate`")
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params) or (params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `delete_account_certificate`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/trusted-certificates/{cert-id}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_account_group(self, account_id, group_id, **kwargs):
        """
        Delete a group.
        An endpoint for deleting a group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_group(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_account_group_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.delete_account_group_with_http_info(account_id, group_id, **kwargs)
            return data

    def delete_account_group_with_http_info(self, account_id, group_id, **kwargs):
        """
        Delete a group.
        An endpoint for deleting a group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_group_with_http_info(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `delete_account_group`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups/{groupID}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_account_template(self, template_id, **kwargs):
        """
        Delete account template by ID.
        An endpoint for deleting a account template by ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_template(template_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str template_id: The ID of the account template to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_account_template_with_http_info(template_id, **kwargs)
        else:
            (data) = self.delete_account_template_with_http_info(template_id, **kwargs)
            return data

    def delete_account_template_with_http_info(self, template_id, **kwargs):
        """
        Delete account template by ID.
        An endpoint for deleting a account template by ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_template_with_http_info(template_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str template_id: The ID of the account template to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params) or (params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `delete_account_template`")


        collection_formats = {}

        resource_path = '/admin/v3/account-templates/{template-id}'.replace('{format}', 'json')
        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_account_user(self, account_id, user_id, **kwargs):
        """
        Delete a user.
        An endpoint for deleting a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_user(account_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_account_user_with_http_info(account_id, user_id, **kwargs)
        else:
            (data) = self.delete_account_user_with_http_info(account_id, user_id, **kwargs)
            return data

    def delete_account_user_with_http_info(self, account_id, user_id, **kwargs):
        """
        Delete a user.
        An endpoint for deleting a user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_account_user_with_http_info(account_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_account_user`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_account_user`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/users/{user-id}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_api_key(self, account_id, api_key, **kwargs):
        """
        Get API key details.
        An endpoint for retrieving API key details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_api_key(account_id, api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be retrieved. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_api_key_with_http_info(account_id, api_key, **kwargs)
        else:
            (data) = self.get_account_api_key_with_http_info(account_id, api_key, **kwargs)
            return data

    def get_account_api_key_with_http_info(self, account_id, api_key, **kwargs):
        """
        Get API key details.
        An endpoint for retrieving API key details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_api_key_with_http_info(account_id, api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be retrieved. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_api_key`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `get_account_api_key`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/api-keys/{apiKey}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_certificate(self, account_id, cert_id, **kwargs):
        """
        Get trusted certificate by ID.
        An endpoint for retrieving a trusted certificate by ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_certificate(account_id, cert_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID or name of the trusted certificate to be retrieved. (required)
        :return: TrustedCertificateInternalResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_certificate_with_http_info(account_id, cert_id, **kwargs)
        else:
            (data) = self.get_account_certificate_with_http_info(account_id, cert_id, **kwargs)
            return data

    def get_account_certificate_with_http_info(self, account_id, cert_id, **kwargs):
        """
        Get trusted certificate by ID.
        An endpoint for retrieving a trusted certificate by ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_certificate_with_http_info(account_id, cert_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID or name of the trusted certificate to be retrieved. (required)
        :return: TrustedCertificateInternalResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cert_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_certificate`")
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params) or (params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `get_account_certificate`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/trusted-certificates/{cert-id}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TrustedCertificateInternalResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_group_summary(self, account_id, group_id, **kwargs):
        """
        Get group information.
        An endpoint for getting general information about the group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_group_summary(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID or name of the group to be retrieved. (required)
        :return: GroupSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_group_summary_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.get_account_group_summary_with_http_info(account_id, group_id, **kwargs)
            return data

    def get_account_group_summary_with_http_info(self, account_id, group_id, **kwargs):
        """
        Get group information.
        An endpoint for getting general information about the group.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_group_summary_with_http_info(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID or name of the group to be retrieved. (required)
        :return: GroupSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_group_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_group_summary`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_account_group_summary`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups/{groupID}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GroupSummary',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_info(self, account_id, **kwargs):
        """
        Get account info.
        Returns detailed information about the account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID or alias of the account to be fetched. (required)
        :param str include: Comma separated additional data to return. Currently supported: limits, policies, sub_accounts
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_info_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_account_info_with_http_info(account_id, **kwargs)
            return data

    def get_account_info_with_http_info(self, account_id, **kwargs):
        """
        Get account info.
        Returns detailed information about the account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_info_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID or alias of the account to be fetched. (required)
        :param str include: Comma separated additional data to return. Currently supported: limits, policies, sub_accounts
        :return: AccountInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_info`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_limits(self, account_id, **kwargs):
        """
        Get limits for account.
        Endpoint for retrieving limits by account ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_limits(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID of the account whose limits to be retrieved. (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_limits_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_account_limits_with_http_info(account_id, **kwargs)
            return data

    def get_account_limits_with_http_info(self, account_id, **kwargs):
        """
        Get limits for account.
        Endpoint for retrieving limits by account ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_limits_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID of the account whose limits to be retrieved. (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_limits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_limits`")


        collection_formats = {}

        resource_path = '/internal/v1/limits/{account-id}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['account-id'] = params['account_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='dict(str, str)',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_template(self, template_id, **kwargs):
        """
        Get account template by ID.
        An endpoint for retrieving a account template by ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_template(template_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str template_id: The ID of the account template to be retrieved. (required)
        :return: AccountTemplateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_template_with_http_info(template_id, **kwargs)
        else:
            (data) = self.get_account_template_with_http_info(template_id, **kwargs)
            return data

    def get_account_template_with_http_info(self, template_id, **kwargs):
        """
        Get account template by ID.
        An endpoint for retrieving a account template by ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_template_with_http_info(template_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str template_id: The ID of the account template to be retrieved. (required)
        :return: AccountTemplateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params) or (params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_account_template`")


        collection_formats = {}

        resource_path = '/admin/v3/account-templates/{template-id}'.replace('{format}', 'json')
        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountTemplateResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_account_user(self, account_id, user_id, **kwargs):
        """
        Details of the user.
        An endpoint for retrieving details of the user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_user(account_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID or name of the user to be retrieved. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_account_user_with_http_info(account_id, user_id, **kwargs)
        else:
            (data) = self.get_account_user_with_http_info(account_id, user_id, **kwargs)
            return data

    def get_account_user_with_http_info(self, account_id, user_id, **kwargs):
        """
        Details of the user.
        An endpoint for retrieving details of the user.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_user_with_http_info(account_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID or name of the user to be retrieved. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_account_user`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_account_user`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/users/{user-id}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_admin_options(self, **kwargs):
        """
        Get admin options.
        An endpoint for retrieving admin options.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_admin_options(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[FeatureOptionsResp]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_admin_options_with_http_info(**kwargs)
        else:
            (data) = self.get_admin_options_with_http_info(**kwargs)
            return data

    def get_admin_options_with_http_info(self, **kwargs):
        """
        Get admin options.
        An endpoint for retrieving admin options.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_admin_options_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[FeatureOptionsResp]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_admin_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/admin/v3/iam/features'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[FeatureOptionsResp]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_account_api_keys(self, account_id, **kwargs):
        """
        Get all API keys.
        An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_account_api_keys(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str filter: Filter for the query, for example filter=owner%3Duuid.
        :param str owner: Owner name filter.
        :param str owner__eq: Owner name filter.
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_account_api_keys_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_all_account_api_keys_with_http_info(account_id, **kwargs)
            return data

    def get_all_account_api_keys_with_http_info(self, account_id, **kwargs):
        """
        Get all API keys.
        An endpoint for retrieving the API keys in an array, optionally filtered by the owner.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_account_api_keys_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str filter: Filter for the query, for example filter=owner%3Duuid.
        :param str owner: Owner name filter.
        :param str owner__eq: Owner name filter.
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'after', 'order', 'include', 'filter', 'owner', 'owner__eq']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_account_api_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_all_account_api_keys`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/api-keys'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include' in params:
            query_params['include'] = params['include']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'owner' in params:
            query_params['owner'] = params['owner']
        if 'owner__eq' in params:
            query_params['owner__eq'] = params['owner__eq']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoRespList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_account_certificates(self, account_id, **kwargs):
        """
        Get all trusted certificates.
        An endpoint for retrieving trusted certificates in an array.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_account_certificates(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str filter: Filter for the query, for example filter=service%3Dlwm2m,expire%3D180,device_execution_mode%3D0.
        :param str service__eq: Filter for service
        :param int expire__eq: Filter for expire
        :param int device_execution_mode__eq: Filter for developer certificates
        :return: TrustedCertificateInternalRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_account_certificates_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_all_account_certificates_with_http_info(account_id, **kwargs)
            return data

    def get_all_account_certificates_with_http_info(self, account_id, **kwargs):
        """
        Get all trusted certificates.
        An endpoint for retrieving trusted certificates in an array.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_account_certificates_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str filter: Filter for the query, for example filter=service%3Dlwm2m,expire%3D180,device_execution_mode%3D0.
        :param str service__eq: Filter for service
        :param int expire__eq: Filter for expire
        :param int device_execution_mode__eq: Filter for developer certificates
        :return: TrustedCertificateInternalRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'after', 'order', 'include', 'filter', 'service__eq', 'expire__eq', 'device_execution_mode__eq']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_account_certificates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_all_account_certificates`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/trusted-certificates'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include' in params:
            query_params['include'] = params['include']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'service__eq' in params:
            query_params['service__eq'] = params['service__eq']
        if 'expire__eq' in params:
            query_params['expire__eq'] = params['expire__eq']
        if 'device_execution_mode__eq' in params:
            query_params['device_execution_mode__eq'] = params['device_execution_mode__eq']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TrustedCertificateInternalRespList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_account_groups(self, account_id, **kwargs):
        """
        Get all group information.
        An endpoint for retrieving all group information.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_account_groups(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: list[GroupSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_account_groups_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_all_account_groups_with_http_info(account_id, **kwargs)
            return data

    def get_all_account_groups_with_http_info(self, account_id, **kwargs):
        """
        Get all group information.
        An endpoint for retrieving all group information.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_account_groups_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: list[GroupSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'after', 'order', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_account_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_all_account_groups`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GroupSummary]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_account_templates(self, **kwargs):
        """
        Get all account templates.
        An endpoint for retrieving account templates in an array.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_account_templates(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; default ASC.
        :param str include: Comma separated additional data to return. Currently supported: total_count.
        :param str template_type__eq: Filter for Account Template Type.
        :return: AccountTemplateRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_account_templates_with_http_info(**kwargs)
        else:
            (data) = self.get_all_account_templates_with_http_info(**kwargs)
            return data

    def get_all_account_templates_with_http_info(self, **kwargs):
        """
        Get all account templates.
        An endpoint for retrieving account templates in an array.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_account_templates_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; default ASC.
        :param str include: Comma separated additional data to return. Currently supported: total_count.
        :param str template_type__eq: Filter for Account Template Type.
        :return: AccountTemplateRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'order', 'include', 'template_type__eq']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_account_templates" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/admin/v3/account-templates'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include' in params:
            query_params['include'] = params['include']
        if 'template_type__eq' in params:
            query_params['template_type__eq'] = params['template_type__eq']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountTemplateRespList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_account_users(self, account_id, **kwargs):
        """
        Get all user details.
        An endpoint for retrieving details of all users.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_account_users(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str filter: Filter for the query, for example filter=status%3Dactive,status%3Dreset.
        :param str status__eq: Filter for status
        :return: UserInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_account_users_with_http_info(account_id, **kwargs)
        else:
            (data) = self.get_all_account_users_with_http_info(account_id, **kwargs)
            return data

    def get_all_account_users_with_http_info(self, account_id, **kwargs):
        """
        Get all user details.
        An endpoint for retrieving details of all users.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_account_users_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str filter: Filter for the query, for example filter=status%3Dactive,status%3Dreset.
        :param str status__eq: Filter for status
        :return: UserInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'limit', 'after', 'order', 'include', 'filter', 'status__eq']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_account_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_all_account_users`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/users'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include' in params:
            query_params['include'] = params['include']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'status__eq' in params:
            query_params['status__eq'] = params['status__eq']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoRespList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_accounts(self, **kwargs):
        """
        Get all accounts.
        Returns an array of account objects, optionally filtered by status and tier level.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_accounts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED.
        :param str tier: An optional filter for tier level, must be 0, 1 or omitted.
        :param str parent: An optional filter for parent account ID.
        :param str status__eq: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED.
        :param str tier__eq: An optional filter for tier level, must be 0, 1 or omitted.
        :param str parent__eq: An optional filter for parent account ID.
        :param int limit: The number of results to return (2-1000). By default, it is unlimited.
        :param str after: The entity ID to fetch after the given one.
        :param str include: Comma separated additional data to return. Currently supported: total_count,limits
        :param str filter: Filter for the query, for example filter=tier%3D1, status%3DACTIVE or parent%3D{uuid}.
        :param str format: Format information for the response to the query, supported: format=breakdown.
        :return: AccountInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_accounts_with_http_info(**kwargs)
        else:
            (data) = self.get_all_accounts_with_http_info(**kwargs)
            return data

    def get_all_accounts_with_http_info(self, **kwargs):
        """
        Get all accounts.
        Returns an array of account objects, optionally filtered by status and tier level.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_accounts_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str status: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED.
        :param str tier: An optional filter for tier level, must be 0, 1 or omitted.
        :param str parent: An optional filter for parent account ID.
        :param str status__eq: An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED or SUSPENDED.
        :param str tier__eq: An optional filter for tier level, must be 0, 1 or omitted.
        :param str parent__eq: An optional filter for parent account ID.
        :param int limit: The number of results to return (2-1000). By default, it is unlimited.
        :param str after: The entity ID to fetch after the given one.
        :param str include: Comma separated additional data to return. Currently supported: total_count,limits
        :param str filter: Filter for the query, for example filter=tier%3D1, status%3DACTIVE or parent%3D{uuid}.
        :param str format: Format information for the response to the query, supported: format=breakdown.
        :return: AccountInfoList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'tier', 'parent', 'status__eq', 'tier__eq', 'parent__eq', 'limit', 'after', 'include', 'filter', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_accounts" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/v3/accounts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'status' in params:
            query_params['status'] = params['status']
        if 'tier' in params:
            query_params['tier'] = params['tier']
        if 'parent' in params:
            query_params['parent'] = params['parent']
        if 'status__eq' in params:
            query_params['status__eq'] = params['status__eq']
        if 'tier__eq' in params:
            query_params['tier__eq'] = params['tier__eq']
        if 'parent__eq' in params:
            query_params['parent__eq'] = params['parent__eq']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'include' in params:
            query_params['include'] = params['include']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'format' in params:
            query_params['format'] = params['format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountInfoList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_accounts_all_api_keys(self, **kwargs):
        """
        Get all API keys from all accounts
        An endpoint for retrieving API keys from all accounts.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_accounts_all_api_keys(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str filter: A filter for the query, for example filter=owner%3Duuid.
        :param str owner: Owner name filter.
        :param str owner__eq: Owner name filter.
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_accounts_all_api_keys_with_http_info(**kwargs)
        else:
            (data) = self.get_all_accounts_all_api_keys_with_http_info(**kwargs)
            return data

    def get_all_accounts_all_api_keys_with_http_info(self, **kwargs):
        """
        Get all API keys from all accounts
        An endpoint for retrieving API keys from all accounts.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_accounts_all_api_keys_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str filter: A filter for the query, for example filter=owner%3Duuid.
        :param str owner: Owner name filter.
        :param str owner__eq: Owner name filter.
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'order', 'include', 'filter', 'owner', 'owner__eq']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_accounts_all_api_keys" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/admin/v3/api-keys'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include' in params:
            query_params['include'] = params['include']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'owner' in params:
            query_params['owner'] = params['owner']
        if 'owner__eq' in params:
            query_params['owner__eq'] = params['owner__eq']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoRespList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_accounts_all_users(self, **kwargs):
        """
        Get all users from all accounts
        Endpoint for retrieving user info from all accounts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_accounts_all_users(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str filter: Filter for the query, for example filter=status%3Dactive,status%3Dreset.
        :param str status__eq: Filter for status, for example active or reset
        :return: UserInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_accounts_all_users_with_http_info(**kwargs)
        else:
            (data) = self.get_all_accounts_all_users_with_http_info(**kwargs)
            return data

    def get_all_accounts_all_users_with_http_info(self, **kwargs):
        """
        Get all users from all accounts
        Endpoint for retrieving user info from all accounts
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_accounts_all_users_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :param str filter: Filter for the query, for example filter=status%3Dactive,status%3Dreset.
        :param str status__eq: Filter for status, for example active or reset
        :return: UserInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'after', 'order', 'include', 'filter', 'status__eq']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_accounts_all_users" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/admin/v3/users'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include' in params:
            query_params['include'] = params['include']
        if 'filter' in params:
            query_params['filter'] = params['filter']
        if 'status__eq' in params:
            query_params['status__eq'] = params['status__eq']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoRespList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_api_keys_of_account_group(self, account_id, group_id, **kwargs):
        """
        Get API keys of a group.
        An endpoint for listing the API keys of the group with details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_keys_of_account_group(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group whose API keys are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_api_keys_of_account_group_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.get_api_keys_of_account_group_with_http_info(account_id, group_id, **kwargs)
            return data

    def get_api_keys_of_account_group_with_http_info(self, account_id, group_id, **kwargs):
        """
        Get API keys of a group.
        An endpoint for listing the API keys of the group with details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_api_keys_of_account_group_with_http_info(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group whose API keys are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: ApiKeyInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'limit', 'after', 'order', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_keys_of_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_api_keys_of_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_api_keys_of_account_group`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoRespList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_users_of_account_group(self, account_id, group_id, **kwargs):
        """
        Get users of a group.
        An endpoint for listing users of the group with details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_users_of_account_group(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group whose users are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: UserInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_users_of_account_group_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.get_users_of_account_group_with_http_info(account_id, group_id, **kwargs)
            return data

    def get_users_of_account_group_with_http_info(self, account_id, group_id, **kwargs):
        """
        Get users of a group.
        An endpoint for listing users of the group with details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_users_of_account_group_with_http_info(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: The ID of the group whose users are retrieved. (required)
        :param int limit: The number of results to return (2-1000), default is 50.
        :param str after: The entity ID to fetch after the given one.
        :param str order: The order of the records, ASC or DESC; by default ASC
        :param str include: Comma separated additional data to return. Currently supported: total_count
        :return: UserInfoRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'limit', 'after', 'order', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_of_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_users_of_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_users_of_account_group`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups/{groupID}/users'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoRespList',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def manage_account(self, account_id, **kwargs):
        """
        Manage an account.
        This endpoint upgrades the account from free tier to commercial, sets the new status.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.manage_account(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID of the account to be updated. (required)
        :param str status: New status of the account; ACTIVE, RESTRICTED or SUSPENDED
        :param str tier: New tier level of the account; '0': free tier, '1': commercial account. Other values are reserved for the future.
        :param str is_provisioning_allowed: A flag indicating whether Factory Tool is permitted to be downloaded or not, true or false.
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.manage_account_with_http_info(account_id, **kwargs)
        else:
            (data) = self.manage_account_with_http_info(account_id, **kwargs)
            return data

    def manage_account_with_http_info(self, account_id, **kwargs):
        """
        Manage an account.
        This endpoint upgrades the account from free tier to commercial, sets the new status.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.manage_account_with_http_info(account_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: The ID of the account to be updated. (required)
        :param str status: New status of the account; ACTIVE, RESTRICTED or SUSPENDED
        :param str tier: New tier level of the account; '0': free tier, '1': commercial account. Other values are reserved for the future.
        :param str is_provisioning_allowed: A flag indicating whether Factory Tool is permitted to be downloaded or not, true or false.
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'status', 'tier', 'is_provisioning_allowed']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method manage_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `manage_account`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/manage'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']

        query_params = {}
        if 'status' in params:
            query_params['status'] = params['status']
        if 'tier' in params:
            query_params['tier'] = params['tier']
        if 'is_provisioning_allowed' in params:
            query_params['isProvisioningAllowed'] = params['is_provisioning_allowed']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_api_keys_from_account_group(self, account_id, group_id, **kwargs):
        """
        Remove API keys from a group.
        An endpoint for removing API keys from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_api_keys_from_account_group(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: A list of API keys to be removed from the group. (required)
        :param SubjectList body:
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_api_keys_from_account_group_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.remove_api_keys_from_account_group_with_http_info(account_id, group_id, **kwargs)
            return data

    def remove_api_keys_from_account_group_with_http_info(self, account_id, group_id, **kwargs):
        """
        Remove API keys from a group.
        An endpoint for removing API keys from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_api_keys_from_account_group_with_http_info(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: A list of API keys to be removed from the group. (required)
        :param SubjectList body:
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_api_keys_from_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `remove_api_keys_from_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `remove_api_keys_from_account_group`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups/{groupID}/api-keys'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_users_from_account_group(self, account_id, group_id, **kwargs):
        """
        Remove users from a group.
        An endpoint for removing users from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_users_from_account_group(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: (required)
        :param SubjectList body:
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_users_from_account_group_with_http_info(account_id, group_id, **kwargs)
        else:
            (data) = self.remove_users_from_account_group_with_http_info(account_id, group_id, **kwargs)
            return data

    def remove_users_from_account_group_with_http_info(self, account_id, group_id, **kwargs):
        """
        Remove users from a group.
        An endpoint for removing users from groups.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_users_from_account_group_with_http_info(account_id, group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str group_id: (required)
        :param SubjectList body:
        :return: UpdatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'group_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_users_from_account_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `remove_users_from_account_group`")
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `remove_users_from_account_group`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/policy-groups/{groupID}/users'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'group_id' in params:
            path_params['groupID'] = params['group_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdatedResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def reset_account_api_key_secret(self, account_id, api_key, **kwargs):
        """
        Reset the secret key.
        An endpoint for resetting the secret key of the API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_account_api_key_secret(account_id, api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be reset. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.reset_account_api_key_secret_with_http_info(account_id, api_key, **kwargs)
        else:
            (data) = self.reset_account_api_key_secret_with_http_info(account_id, api_key, **kwargs)
            return data

    def reset_account_api_key_secret_with_http_info(self, account_id, api_key, **kwargs):
        """
        Reset the secret key.
        An endpoint for resetting the secret key of the API key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_account_api_key_secret_with_http_info(account_id, api_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be reset. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_account_api_key_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `reset_account_api_key_secret`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `reset_account_api_key_secret`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/api-keys/{apiKey}/reset-secret'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def reset_account_user_password(self, account_id, user_id, **kwargs):
        """
        Reset the user password.
        An endpoint for resetting the user password. The new password will visible in the response.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_account_user_password(account_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user whose password is reset. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.reset_account_user_password_with_http_info(account_id, user_id, **kwargs)
        else:
            (data) = self.reset_account_user_password_with_http_info(account_id, user_id, **kwargs)
            return data

    def reset_account_user_password_with_http_info(self, account_id, user_id, **kwargs):
        """
        Reset the user password.
        An endpoint for resetting the user password. The new password will visible in the response.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_account_user_password_with_http_info(account_id, user_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user whose password is reset. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_account_user_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `reset_account_user_password`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `reset_account_user_password`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/users/{user-id}/reset-password'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_account_api_key(self, account_id, api_key, body, **kwargs):
        """
        Update API key details.
        An endpoint for updating API key details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_account_api_key(account_id, api_key, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be updated. (required)
        :param RootAdminApiKeyUpdateReq body: New API key attributes to be stored. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_account_api_key_with_http_info(account_id, api_key, body, **kwargs)
        else:
            (data) = self.update_account_api_key_with_http_info(account_id, api_key, body, **kwargs)
            return data

    def update_account_api_key_with_http_info(self, account_id, api_key, body, **kwargs):
        """
        Update API key details.
        An endpoint for updating API key details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_account_api_key_with_http_info(account_id, api_key, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str api_key: The ID of the API key to be updated. (required)
        :param RootAdminApiKeyUpdateReq body: New API key attributes to be stored. (required)
        :return: ApiKeyInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'api_key', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_account_api_key`")
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params) or (params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `update_account_api_key`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account_api_key`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/api-keys/{apiKey}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'api_key' in params:
            path_params['apiKey'] = params['api_key']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiKeyInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_account_certificate(self, account_id, cert_id, body, **kwargs):
        """
        Update trusted certificate.
        An endpoint for updating existing trusted certificates.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_account_certificate(account_id, cert_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID of the trusted certificate to be updated. (required)
        :param TrustedCertificateReq body: A trusted certificate object with attributes. (required)
        :return: TrustedCertificateInternalResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_account_certificate_with_http_info(account_id, cert_id, body, **kwargs)
        else:
            (data) = self.update_account_certificate_with_http_info(account_id, cert_id, body, **kwargs)
            return data

    def update_account_certificate_with_http_info(self, account_id, cert_id, body, **kwargs):
        """
        Update trusted certificate.
        An endpoint for updating existing trusted certificates.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_account_certificate_with_http_info(account_id, cert_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str cert_id: The ID of the trusted certificate to be updated. (required)
        :param TrustedCertificateReq body: A trusted certificate object with attributes. (required)
        :return: TrustedCertificateInternalResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cert_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_account_certificate`")
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params) or (params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `update_account_certificate`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account_certificate`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/trusted-certificates/{cert-id}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'cert_id' in params:
            path_params['cert-id'] = params['cert_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TrustedCertificateInternalResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_account_template(self, template_id, body, **kwargs):
        """
        Update an existing account template.
        An endpoint for updating an existing account template.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_account_template(template_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str template_id: The ID of the account template to be updated. (required)
        :param AccountTemplateReq body: Details of the account template to be updated. (required)
        :return: AccountTemplateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_account_template_with_http_info(template_id, body, **kwargs)
        else:
            (data) = self.update_account_template_with_http_info(template_id, body, **kwargs)
            return data

    def update_account_template_with_http_info(self, template_id, body, **kwargs):
        """
        Update an existing account template.
        An endpoint for updating an existing account template.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_account_template_with_http_info(template_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str template_id: The ID of the account template to be updated. (required)
        :param AccountTemplateReq body: Details of the account template to be updated. (required)
        :return: AccountTemplateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params) or (params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `update_account_template`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account_template`")


        collection_formats = {}

        resource_path = '/admin/v3/account-templates/{template-id}'.replace('{format}', 'json')
        path_params = {}
        if 'template_id' in params:
            path_params['template-id'] = params['template_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountTemplateResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_account_user(self, account_id, user_id, body, **kwargs):
        """
        Update user details.
        An endpoint for updating user details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_account_user(account_id, user_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be updated. (required)
        :param RootAdminUserUpdateReq body: A rootadmin user object with attributes. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_account_user_with_http_info(account_id, user_id, body, **kwargs)
        else:
            (data) = self.update_account_user_with_http_info(account_id, user_id, body, **kwargs)
            return data

    def update_account_user_with_http_info(self, account_id, user_id, body, **kwargs):
        """
        Update user details.
        An endpoint for updating user details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_account_user_with_http_info(account_id, user_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str account_id: Account ID. (required)
        :param str user_id: The ID of the user to be updated. (required)
        :param RootAdminUserUpdateReq body: A rootadmin user object with attributes. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'user_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params) or (params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_account_user`")
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params) or (params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_account_user`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_account_user`")


        collection_formats = {}

        resource_path = '/v3/accounts/{accountID}/users/{user-id}'.replace('{format}', 'json')
        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']
        if 'user_id' in params:
            path_params['user-id'] = params['user_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
