# coding: utf-8

"""
    IAM Identities REST API

    REST API to manage accounts, groups, users and API keys

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def activate_user(self, invitation_id, body, **kwargs):
        """
        Accept invitation.
        Accepting pending invitation and providing missing details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.activate_user(invitation_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: Invitation ID received in email. (required)
        :param UserUpdateReq body: Details of the user accepting the invitation. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.activate_user_with_http_info(invitation_id, body, **kwargs)
        else:
            (data) = self.activate_user_with_http_info(invitation_id, body, **kwargs)
            return data

    def activate_user_with_http_info(self, invitation_id, body, **kwargs):
        """
        Accept invitation.
        Accepting pending invitation and providing missing details.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.activate_user_with_http_info(invitation_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: Invitation ID received in email. (required)
        :param UserUpdateReq body: Details of the user accepting the invitation. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `activate_user`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `activate_user`")


        collection_formats = {}

        resource_path = '/auth/invitations/{invitation-id}'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitation-id'] = params['invitation_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def apply_password_recovery(self, body, **kwargs):
        """
        Apply password recovery.
        Applying password recovery by providing a secret hash code.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apply_password_recovery(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PasswordRecoveryReq body: Hash received by email and new password. (required)
        :param str x_forwarded_for:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.apply_password_recovery_with_http_info(body, **kwargs)
        else:
            (data) = self.apply_password_recovery_with_http_info(body, **kwargs)
            return data

    def apply_password_recovery_with_http_info(self, body, **kwargs):
        """
        Apply password recovery.
        Applying password recovery by providing a secret hash code.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apply_password_recovery_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PasswordRecoveryReq body: Hash received by email and new password. (required)
        :param str x_forwarded_for:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_forwarded_for']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_password_recovery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `apply_password_recovery`")


        collection_formats = {}

        resource_path = '/auth/recover'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_forwarded_for' in params:
            header_params['X-Forwarded-For'] = params['x_forwarded_for']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_invited_user(self, invitation_id, **kwargs):
        """
        Get invited user.
        Returns information about the user being invited.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_invited_user(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: Invitation ID received in email. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_invited_user_with_http_info(invitation_id, **kwargs)
        else:
            (data) = self.get_invited_user_with_http_info(invitation_id, **kwargs)
            return data

    def get_invited_user_with_http_info(self, invitation_id, **kwargs):
        """
        Get invited user.
        Returns information about the user being invited.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_invited_user_with_http_info(invitation_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str invitation_id: Invitation ID received in email. (required)
        :return: UserInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_invited_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params) or (params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `get_invited_user`")


        collection_formats = {}

        resource_path = '/auth/invitations/{invitation-id}'.replace('{format}', 'json')
        path_params = {}
        if 'invitation_id' in params:
            path_params['invitation-id'] = params['invitation_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfoResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_self_enrolling_user(self, signup_id, **kwargs):
        """
        Get registering user.
        Retrieving the details of a user to register.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_self_enrolling_user(signup_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str signup_id: ID received while signing up. (required)
        :return: AccountSignupResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_self_enrolling_user_with_http_info(signup_id, **kwargs)
        else:
            (data) = self.get_self_enrolling_user_with_http_info(signup_id, **kwargs)
            return data

    def get_self_enrolling_user_with_http_info(self, signup_id, **kwargs):
        """
        Get registering user.
        Retrieving the details of a user to register.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_self_enrolling_user_with_http_info(signup_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str signup_id: ID received while signing up. (required)
        :return: AccountSignupResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['signup_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_self_enrolling_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'signup_id' is set
        if ('signup_id' not in params) or (params['signup_id'] is None):
            raise ValueError("Missing the required parameter `signup_id` when calling `get_self_enrolling_user`")


        collection_formats = {}

        resource_path = '/auth/register/{signup-id}'.replace('{format}', 'json')
        path_params = {}
        if 'signup_id' in params:
            path_params['signup-id'] = params['signup_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountSignupResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def register_account(self, signup_id, body, **kwargs):
        """
        Register a new account.
        An endpoint for registering a new account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_account(signup_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str signup_id: ID received while signing up. (required)
        :param AccountEnrollmentReq body: Details of the account to be created. (required)
        :return: AccountEnrollmentResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.register_account_with_http_info(signup_id, body, **kwargs)
        else:
            (data) = self.register_account_with_http_info(signup_id, body, **kwargs)
            return data

    def register_account_with_http_info(self, signup_id, body, **kwargs):
        """
        Register a new account.
        An endpoint for registering a new account.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_account_with_http_info(signup_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str signup_id: ID received while signing up. (required)
        :param AccountEnrollmentReq body: Details of the account to be created. (required)
        :return: AccountEnrollmentResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['signup_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'signup_id' is set
        if ('signup_id' not in params) or (params['signup_id'] is None):
            raise ValueError("Missing the required parameter `signup_id` when calling `register_account`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_account`")


        collection_formats = {}

        resource_path = '/auth/register/{signup-id}'.replace('{format}', 'json')
        path_params = {}
        if 'signup_id' in params:
            path_params['signup-id'] = params['signup_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountEnrollmentResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def request_password_recovery(self, body, **kwargs):
        """
        Request password recovery.
        Requesting password recovery by email address.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.request_password_recovery(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PasswordResetReq body: Email address of the user whose password needs to be recovered. (required)
        :param str x_forwarded_for:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.request_password_recovery_with_http_info(body, **kwargs)
        else:
            (data) = self.request_password_recovery_with_http_info(body, **kwargs)
            return data

    def request_password_recovery_with_http_info(self, body, **kwargs):
        """
        Request password recovery.
        Requesting password recovery by email address.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.request_password_recovery_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PasswordResetReq body: Email address of the user whose password needs to be recovered. (required)
        :param str x_forwarded_for:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_forwarded_for']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_password_recovery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `request_password_recovery`")


        collection_formats = {}

        resource_path = '/auth/recover'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'x_forwarded_for' in params:
            header_params['X-Forwarded-For'] = params['x_forwarded_for']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def signup(self, body, **kwargs):
        """
        Sign up for a new account.
        Signing up for a new free tier account with email address.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.signup(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccountSignupReq body: Email address of the user to be signed up. (required)
        :return: AccountSignupResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.signup_with_http_info(body, **kwargs)
        else:
            (data) = self.signup_with_http_info(body, **kwargs)
            return data

    def signup_with_http_info(self, body, **kwargs):
        """
        Sign up for a new account.
        Signing up for a new free tier account with email address.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.signup_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AccountSignupReq body: Email address of the user to be signed up. (required)
        :return: AccountSignupResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method signup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `signup`")


        collection_formats = {}

        resource_path = '/auth/register'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AccountSignupResp',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def verify_self_enrollment(self, signup_id, **kwargs):
        """
        Verify self-enrollment code and aliases.
        Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.verify_self_enrollment(signup_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str signup_id: ID received while signing up. (required)
        :param AccountSignupVerify body: Verification code received by email and aliases to be checked.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.verify_self_enrollment_with_http_info(signup_id, **kwargs)
        else:
            (data) = self.verify_self_enrollment_with_http_info(signup_id, **kwargs)
            return data

    def verify_self_enrollment_with_http_info(self, signup_id, **kwargs):
        """
        Verify self-enrollment code and aliases.
        Verifying whether the code received by email is valid. Optionally, it also verifies whether an account with the given aliases exists.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.verify_self_enrollment_with_http_info(signup_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str signup_id: ID received while signing up. (required)
        :param AccountSignupVerify body: Verification code received by email and aliases to be checked.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['signup_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_self_enrollment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'signup_id' is set
        if ('signup_id' not in params) or (params['signup_id'] is None):
            raise ValueError("Missing the required parameter `signup_id` when calling `verify_self_enrollment`")


        collection_formats = {}

        resource_path = '/auth/register/{signup-id}'.replace('{format}', 'json')
        path_params = {}
        if 'signup_id' in params:
            path_params['signup-id'] = params['signup_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
