# coding: utf-8

"""
    IAM Identities REST API

    REST API to manage accounts, groups, users and API keys

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccountTemplateResp(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, limits=None, name=None, parent=None, created_at=None, object=None, etag=None, creation_time_millis=None, id=None, resources=None, description=None):
        """
        AccountTemplateResp - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'limits': 'dict(str, str)',
            'name': 'str',
            'parent': 'str',
            'created_at': 'str',
            'object': 'str',
            'etag': 'str',
            'creation_time_millis': 'int',
            'id': 'str',
            'resources': 'list[Policy]',
            'description': 'str'
        }

        self.attribute_map = {
            'limits': 'limits',
            'name': 'name',
            'parent': 'parent',
            'created_at': 'created_at',
            'object': 'object',
            'etag': 'etag',
            'creation_time_millis': 'creationTimeMillis',
            'id': 'id',
            'resources': 'resources',
            'description': 'description'
        }

        self._limits = limits
        self._name = name
        self._parent = parent
        self._created_at = created_at
        self._object = object
        self._etag = etag
        self._creation_time_millis = creation_time_millis
        self._id = id
        self._resources = resources
        self._description = description

    @property
    def limits(self):
        """
        Gets the limits of this AccountTemplateResp.
        List of limits as name-value pairs.

        :return: The limits of this AccountTemplateResp.
        :rtype: dict(str, str)
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """
        Sets the limits of this AccountTemplateResp.
        List of limits as name-value pairs.

        :param limits: The limits of this AccountTemplateResp.
        :type: dict(str, str)
        """

        self._limits = limits

    @property
    def name(self):
        """
        Gets the name of this AccountTemplateResp.
        Account template name.

        :return: The name of this AccountTemplateResp.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AccountTemplateResp.
        Account template name.

        :param name: The name of this AccountTemplateResp.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent(self):
        """
        Gets the parent of this AccountTemplateResp.
        ID of the parent template, can be null.

        :return: The parent of this AccountTemplateResp.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this AccountTemplateResp.
        ID of the parent template, can be null.

        :param parent: The parent of this AccountTemplateResp.
        :type: str
        """

        self._parent = parent

    @property
    def created_at(self):
        """
        Gets the created_at of this AccountTemplateResp.
        Creation UTC time RFC3339.

        :return: The created_at of this AccountTemplateResp.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this AccountTemplateResp.
        Creation UTC time RFC3339.

        :param created_at: The created_at of this AccountTemplateResp.
        :type: str
        """

        self._created_at = created_at

    @property
    def object(self):
        """
        Gets the object of this AccountTemplateResp.
        Entity name: always 'account-template'

        :return: The object of this AccountTemplateResp.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this AccountTemplateResp.
        Entity name: always 'account-template'

        :param object: The object of this AccountTemplateResp.
        :type: str
        """
        allowed_values = ["user", "api_key", "group", "account", "account_template", "ca_cert", "list", "error"]
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def etag(self):
        """
        Gets the etag of this AccountTemplateResp.
        API resource entity version.

        :return: The etag of this AccountTemplateResp.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """
        Sets the etag of this AccountTemplateResp.
        API resource entity version.

        :param etag: The etag of this AccountTemplateResp.
        :type: str
        """
        if etag is None:
            raise ValueError("Invalid value for `etag`, must not be `None`")

        self._etag = etag

    @property
    def creation_time_millis(self):
        """
        Gets the creation_time_millis of this AccountTemplateResp.

        :return: The creation_time_millis of this AccountTemplateResp.
        :rtype: int
        """
        return self._creation_time_millis

    @creation_time_millis.setter
    def creation_time_millis(self, creation_time_millis):
        """
        Sets the creation_time_millis of this AccountTemplateResp.

        :param creation_time_millis: The creation_time_millis of this AccountTemplateResp.
        :type: int
        """

        self._creation_time_millis = creation_time_millis

    @property
    def id(self):
        """
        Gets the id of this AccountTemplateResp.
        Entity ID.

        :return: The id of this AccountTemplateResp.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AccountTemplateResp.
        Entity ID.

        :param id: The id of this AccountTemplateResp.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def resources(self):
        """
        Gets the resources of this AccountTemplateResp.
        List of resource-action-allow triplets, policies.

        :return: The resources of this AccountTemplateResp.
        :rtype: list[Policy]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this AccountTemplateResp.
        List of resource-action-allow triplets, policies.

        :param resources: The resources of this AccountTemplateResp.
        :type: list[Policy]
        """

        self._resources = resources

    @property
    def description(self):
        """
        Gets the description of this AccountTemplateResp.
        Account template description.

        :return: The description of this AccountTemplateResp.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AccountTemplateResp.
        Account template description.

        :param description: The description of this AccountTemplateResp.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AccountTemplateResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
