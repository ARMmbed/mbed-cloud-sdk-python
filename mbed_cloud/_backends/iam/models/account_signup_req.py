# coding: utf-8

"""
    IAM Identities REST API

    REST API to manage accounts, groups, users and API keys

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccountSignupReq(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, phone_number=None, country=None, company=None, email=None, full_name=None):
        """
        AccountSignupReq - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'phone_number': 'str',
            'country': 'str',
            'company': 'str',
            'email': 'str',
            'full_name': 'str'
        }

        self.attribute_map = {
            'phone_number': 'phone_number',
            'country': 'country',
            'company': 'company',
            'email': 'email',
            'full_name': 'full_name'
        }

        self._phone_number = phone_number
        self._country = country
        self._company = company
        self._email = email
        self._full_name = full_name

    @property
    def phone_number(self):
        """
        Gets the phone_number of this AccountSignupReq.
        The phone number of the user.

        :return: The phone_number of this AccountSignupReq.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this AccountSignupReq.
        The phone number of the user.

        :param phone_number: The phone_number of this AccountSignupReq.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def country(self):
        """
        Gets the country of this AccountSignupReq.
        The country for the company.

        :return: The country of this AccountSignupReq.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this AccountSignupReq.
        The country for the company.

        :param country: The country of this AccountSignupReq.
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def company(self):
        """
        Gets the company of this AccountSignupReq.
        The name of the company.

        :return: The company of this AccountSignupReq.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """
        Sets the company of this AccountSignupReq.
        The name of the company.

        :param company: The company of this AccountSignupReq.
        :type: str
        """
        if company is None:
            raise ValueError("Invalid value for `company`, must not be `None`")

        self._company = company

    @property
    def email(self):
        """
        Gets the email of this AccountSignupReq.
        The email address of the user.

        :return: The email of this AccountSignupReq.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this AccountSignupReq.
        The email address of the user.

        :param email: The email of this AccountSignupReq.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def full_name(self):
        """
        Gets the full_name of this AccountSignupReq.
        The full name of the user.

        :return: The full_name of this AccountSignupReq.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this AccountSignupReq.
        The full name of the user.

        :param full_name: The full_name of this AccountSignupReq.
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AccountSignupReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
