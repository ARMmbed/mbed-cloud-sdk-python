# coding: utf-8

"""
    IAM Identities REST API

    REST API to manage accounts, groups, users and api-keys

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UserInfoReq(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, username=None, phone_number=None, groups=None, is_gtc_accepted=False, is_marketing_accepted=False, full_name=None, address=None, password=None, email=None):
        """
        UserInfoReq - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'username': 'str',
            'phone_number': 'str',
            'groups': 'list[str]',
            'is_gtc_accepted': 'bool',
            'is_marketing_accepted': 'bool',
            'full_name': 'str',
            'address': 'str',
            'password': 'str',
            'email': 'str'
        }

        self.attribute_map = {
            'username': 'username',
            'phone_number': 'phone_number',
            'groups': 'groups',
            'is_gtc_accepted': 'is_gtc_accepted',
            'is_marketing_accepted': 'is_marketing_accepted',
            'full_name': 'full_name',
            'address': 'address',
            'password': 'password',
            'email': 'email'
        }

        self._username = username
        self._phone_number = phone_number
        self._groups = groups
        self._is_gtc_accepted = is_gtc_accepted
        self._is_marketing_accepted = is_marketing_accepted
        self._full_name = full_name
        self._address = address
        self._password = password
        self._email = email

    @property
    def username(self):
        """
        Gets the username of this UserInfoReq.
        A username containing alphanumerical letters and -,._@+= characters.

        :return: The username of this UserInfoReq.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this UserInfoReq.
        A username containing alphanumerical letters and -,._@+= characters.

        :param username: The username of this UserInfoReq.
        :type: str
        """

        self._username = username

    @property
    def phone_number(self):
        """
        Gets the phone_number of this UserInfoReq.
        Phone number.

        :return: The phone_number of this UserInfoReq.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this UserInfoReq.
        Phone number.

        :param phone_number: The phone_number of this UserInfoReq.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def groups(self):
        """
        Gets the groups of this UserInfoReq.
        A list of IDs of the groups this user belongs to.

        :return: The groups of this UserInfoReq.
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this UserInfoReq.
        A list of IDs of the groups this user belongs to.

        :param groups: The groups of this UserInfoReq.
        :type: list[str]
        """

        self._groups = groups

    @property
    def is_gtc_accepted(self):
        """
        Gets the is_gtc_accepted of this UserInfoReq.
        A flag indicating that the General Terms and Conditions has been accepted.

        :return: The is_gtc_accepted of this UserInfoReq.
        :rtype: bool
        """
        return self._is_gtc_accepted

    @is_gtc_accepted.setter
    def is_gtc_accepted(self, is_gtc_accepted):
        """
        Sets the is_gtc_accepted of this UserInfoReq.
        A flag indicating that the General Terms and Conditions has been accepted.

        :param is_gtc_accepted: The is_gtc_accepted of this UserInfoReq.
        :type: bool
        """

        self._is_gtc_accepted = is_gtc_accepted

    @property
    def is_marketing_accepted(self):
        """
        Gets the is_marketing_accepted of this UserInfoReq.
        A flag indicating that receiving marketing information has been accepted.

        :return: The is_marketing_accepted of this UserInfoReq.
        :rtype: bool
        """
        return self._is_marketing_accepted

    @is_marketing_accepted.setter
    def is_marketing_accepted(self, is_marketing_accepted):
        """
        Sets the is_marketing_accepted of this UserInfoReq.
        A flag indicating that receiving marketing information has been accepted.

        :param is_marketing_accepted: The is_marketing_accepted of this UserInfoReq.
        :type: bool
        """

        self._is_marketing_accepted = is_marketing_accepted

    @property
    def full_name(self):
        """
        Gets the full_name of this UserInfoReq.
        The full name of the user.

        :return: The full_name of this UserInfoReq.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this UserInfoReq.
        The full name of the user.

        :param full_name: The full_name of this UserInfoReq.
        :type: str
        """

        self._full_name = full_name

    @property
    def address(self):
        """
        Gets the address of this UserInfoReq.
        Address.

        :return: The address of this UserInfoReq.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this UserInfoReq.
        Address.

        :param address: The address of this UserInfoReq.
        :type: str
        """

        self._address = address

    @property
    def password(self):
        """
        Gets the password of this UserInfoReq.
        The password when creating a new user. It will will generated when not present in the request.

        :return: The password of this UserInfoReq.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UserInfoReq.
        The password when creating a new user. It will will generated when not present in the request.

        :param password: The password of this UserInfoReq.
        :type: str
        """

        self._password = password

    @property
    def email(self):
        """
        Gets the email of this UserInfoReq.
        Email address.

        :return: The email of this UserInfoReq.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UserInfoReq.
        Email address.

        :param email: The email of this UserInfoReq.
        :type: str
        """

        self._email = email

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
