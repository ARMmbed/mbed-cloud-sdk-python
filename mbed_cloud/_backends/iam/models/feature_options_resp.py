# coding: utf-8

"""
    IAM Identities REST API

    REST API to manage accounts, groups, users and API keys

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FeatureOptionsResp(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, tag=None, feature=None, actions=None, request_path=None):
        """
        FeatureOptionsResp - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tag': 'str',
            'feature': 'str',
            'actions': 'list[str]',
            'request_path': 'str'
        }

        self.attribute_map = {
            'tag': 'tag',
            'feature': 'feature',
            'actions': 'actions',
            'request_path': 'request_path'
        }

        self._tag = tag
        self._feature = feature
        self._actions = actions
        self._request_path = request_path

    @property
    def tag(self):
        """
        Gets the tag of this FeatureOptionsResp.
        Tag of the feature.

        :return: The tag of this FeatureOptionsResp.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this FeatureOptionsResp.
        Tag of the feature.

        :param tag: The tag of this FeatureOptionsResp.
        :type: str
        """

        self._tag = tag

    @property
    def feature(self):
        """
        Gets the feature of this FeatureOptionsResp.
        Name of the feature.

        :return: The feature of this FeatureOptionsResp.
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """
        Sets the feature of this FeatureOptionsResp.
        Name of the feature.

        :param feature: The feature of this FeatureOptionsResp.
        :type: str
        """
        if feature is None:
            raise ValueError("Invalid value for `feature`, must not be `None`")

        self._feature = feature

    @property
    def actions(self):
        """
        Gets the actions of this FeatureOptionsResp.
        Actions available for the feature.

        :return: The actions of this FeatureOptionsResp.
        :rtype: list[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this FeatureOptionsResp.
        Actions available for the feature.

        :param actions: The actions of this FeatureOptionsResp.
        :type: list[str]
        """

        self._actions = actions

    @property
    def request_path(self):
        """
        Gets the request_path of this FeatureOptionsResp.
        Request path of the feature.

        :return: The request_path of this FeatureOptionsResp.
        :rtype: str
        """
        return self._request_path

    @request_path.setter
    def request_path(self, request_path):
        """
        Sets the request_path of this FeatureOptionsResp.
        Request path of the feature.

        :param request_path: The request_path of this FeatureOptionsResp.
        :type: str
        """
        if request_path is None:
            raise ValueError("Invalid value for `request_path`, must not be `None`")

        self._request_path = request_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FeatureOptionsResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
