# coding: utf-8

"""
    IAM Identities REST API

    REST API to manage accounts, groups, users and API keys

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AccountTemplateReq(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, limits=None, resources=None, name=None, parent=None, description=None):
        """
        AccountTemplateReq - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'limits': 'dict(str, str)',
            'resources': 'list[Policy]',
            'name': 'str',
            'parent': 'str',
            'description': 'str'
        }

        self.attribute_map = {
            'limits': 'limits',
            'resources': 'resources',
            'name': 'name',
            'parent': 'parent',
            'description': 'description'
        }

        self._limits = limits
        self._resources = resources
        self._name = name
        self._parent = parent
        self._description = description

    @property
    def limits(self):
        """
        Gets the limits of this AccountTemplateReq.
        List of limits as name-value pairs

        :return: The limits of this AccountTemplateReq.
        :rtype: dict(str, str)
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """
        Sets the limits of this AccountTemplateReq.
        List of limits as name-value pairs

        :param limits: The limits of this AccountTemplateReq.
        :type: dict(str, str)
        """

        self._limits = limits

    @property
    def resources(self):
        """
        Gets the resources of this AccountTemplateReq.
        List of resource-action-allow triplets, policies.

        :return: The resources of this AccountTemplateReq.
        :rtype: list[Policy]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this AccountTemplateReq.
        List of resource-action-allow triplets, policies.

        :param resources: The resources of this AccountTemplateReq.
        :type: list[Policy]
        """

        self._resources = resources

    @property
    def name(self):
        """
        Gets the name of this AccountTemplateReq.
        Account template name

        :return: The name of this AccountTemplateReq.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AccountTemplateReq.
        Account template name

        :param name: The name of this AccountTemplateReq.
        :type: str
        """

        self._name = name

    @property
    def parent(self):
        """
        Gets the parent of this AccountTemplateReq.
        ID of the parent template, can be null.

        :return: The parent of this AccountTemplateReq.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this AccountTemplateReq.
        ID of the parent template, can be null.

        :param parent: The parent of this AccountTemplateReq.
        :type: str
        """

        self._parent = parent

    @property
    def description(self):
        """
        Gets the description of this AccountTemplateReq.
        Account template description

        :return: The description of this AccountTemplateReq.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AccountTemplateReq.
        Account template description

        :param description: The description of this AccountTemplateReq.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
