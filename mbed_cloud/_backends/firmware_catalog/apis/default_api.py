# coding: utf-8

"""
    Firmware Catalog API

    This is the API Documentation for the mbed firmware catalog service which is part of the update service.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def deploy_info_get(self, **kwargs):
        """
        
        <p>Reads the deploy_info.json file and returns the Build and Git ID to the caller.</p> <p>Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_info_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deploy_info_get_with_http_info(**kwargs)
        else:
            (data) = self.deploy_info_get_with_http_info(**kwargs)
            return data

    def deploy_info_get_with_http_info(self, **kwargs):
        """
        
        <p>Reads the deploy_info.json file and returns the Build and Git ID to the caller.</p> <p>Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_info_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_info_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v3/fc_deploy_info'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def firmware_image_create(self, datafile, name, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Create firmware image</p><pre>YAMLError:  while scanning a simple key   in \"<unicode string>\", line 16, column 9:             Cannot validate the data used to ...              ^ could not find expected ':'   in \"<unicode string>\", line 17, column 5:         - code: 401         ^</pre>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_create(datafile, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str datafile: The binary file of firmware image (required)
        :param str name: The name of the object (required)
        :param str description: The description of the object
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str name2: 
        :param str description2: 
        :param str created_at: 
        :param str updated_at: 
        :param str datafile_checksum: 
        :param str etag: 
        :param str image_id: 
        :param str object: 
        :return: FirmwareImageSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_image_create_with_http_info(datafile, name, **kwargs)
        else:
            (data) = self.firmware_image_create_with_http_info(datafile, name, **kwargs)
            return data

    def firmware_image_create_with_http_info(self, datafile, name, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Create firmware image</p><pre>YAMLError:  while scanning a simple key   in \"<unicode string>\", line 16, column 9:             Cannot validate the data used to ...              ^ could not find expected ':'   in \"<unicode string>\", line 17, column 5:         - code: 401         ^</pre>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_create_with_http_info(datafile, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str datafile: The binary file of firmware image (required)
        :param str name: The name of the object (required)
        :param str description: The description of the object
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str name2: 
        :param str description2: 
        :param str created_at: 
        :param str updated_at: 
        :param str datafile_checksum: 
        :param str etag: 
        :param str image_id: 
        :param str object: 
        :return: FirmwareImageSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datafile', 'name', 'description', 'updating_request_id', 'updating_ip_address', 'name2', 'description2', 'created_at', 'updated_at', 'datafile_checksum', 'etag', 'image_id', 'object']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_image_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datafile' is set
        if ('datafile' not in params) or (params['datafile'] is None):
            raise ValueError("Missing the required parameter `datafile` when calling `firmware_image_create`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `firmware_image_create`")

        resource_path = '/v3/firmware-images/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'updating_request_id' in params:
            query_params['updating_request_id'] = params['updating_request_id']
        if 'updating_ip_address' in params:
            query_params['updating_ip_address'] = params['updating_ip_address']
        if 'name2' in params:
            query_params['name'] = params['name2']
        if 'description2' in params:
            query_params['description'] = params['description2']
        if 'created_at' in params:
            query_params['created_at'] = params['created_at']
        if 'updated_at' in params:
            query_params['updated_at'] = params['updated_at']
        if 'datafile_checksum' in params:
            query_params['datafile_checksum'] = params['datafile_checksum']
        if 'etag' in params:
            query_params['etag'] = params['etag']
        if 'image_id' in params:
            query_params['image_id'] = params['image_id']
        if 'object' in params:
            query_params['object'] = params['object']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'datafile' in params:
            form_params.append(('datafile', params['datafile']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'name' in params:
            form_params.append(('name', params['name']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FirmwareImageSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def firmware_image_destroy(self, image_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Delete firmware image</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_destroy(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int image_id: The ID of the firmware image (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str name: 
        :param str description: 
        :param str created_at: 
        :param str updated_at: 
        :param str datafile_checksum: 
        :param str etag: 
        :param str object: 
        :return: FirmwareImageSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_image_destroy_with_http_info(image_id, **kwargs)
        else:
            (data) = self.firmware_image_destroy_with_http_info(image_id, **kwargs)
            return data

    def firmware_image_destroy_with_http_info(self, image_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Delete firmware image</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_destroy_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int image_id: The ID of the firmware image (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str name: 
        :param str description: 
        :param str created_at: 
        :param str updated_at: 
        :param str datafile_checksum: 
        :param str etag: 
        :param str object: 
        :return: FirmwareImageSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'updating_request_id', 'updating_ip_address', 'name', 'description', 'created_at', 'updated_at', 'datafile_checksum', 'etag', 'object']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_image_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `firmware_image_destroy`")

        resource_path = '/v3/firmware-images/{image_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']

        query_params = {}
        if 'updating_request_id' in params:
            query_params['updating_request_id'] = params['updating_request_id']
        if 'updating_ip_address' in params:
            query_params['updating_ip_address'] = params['updating_ip_address']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'created_at' in params:
            query_params['created_at'] = params['created_at']
        if 'updated_at' in params:
            query_params['updated_at'] = params['updated_at']
        if 'datafile_checksum' in params:
            query_params['datafile_checksum'] = params['datafile_checksum']
        if 'etag' in params:
            query_params['etag'] = params['etag']
        if 'object' in params:
            query_params['object'] = params['object']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FirmwareImageSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def firmware_image_list(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware images.  </p> <p>List all firmware images. The result will be paged into pages of 100.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: 
        :param str order: 
        :param str after: 
        :param str include: 
        :return: FirmwareImageSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_image_list_with_http_info(**kwargs)
        else:
            (data) = self.firmware_image_list_with_http_info(**kwargs)
            return data

    def firmware_image_list_with_http_info(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware images.  </p> <p>List all firmware images. The result will be paged into pages of 100.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: 
        :param str order: 
        :param str after: 
        :param str include: 
        :return: FirmwareImageSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'order', 'after', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_image_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v3/firmware-images/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FirmwareImageSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def firmware_image_retrieve(self, image_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Retrieve firmware image</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_retrieve(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int image_id: The ID of the firmware image (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str name: 
        :param str description: 
        :param str created_at: 
        :param str updated_at: 
        :param str datafile_checksum: 
        :param str etag: 
        :param str object: 
        :return: FirmwareImageSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_image_retrieve_with_http_info(image_id, **kwargs)
        else:
            (data) = self.firmware_image_retrieve_with_http_info(image_id, **kwargs)
            return data

    def firmware_image_retrieve_with_http_info(self, image_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware images.  </p> <p>Retrieve firmware image</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_image_retrieve_with_http_info(image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int image_id: The ID of the firmware image (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str name: 
        :param str description: 
        :param str created_at: 
        :param str updated_at: 
        :param str datafile_checksum: 
        :param str etag: 
        :param str object: 
        :return: FirmwareImageSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'updating_request_id', 'updating_ip_address', 'name', 'description', 'created_at', 'updated_at', 'datafile_checksum', 'etag', 'object']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_image_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `firmware_image_retrieve`")

        resource_path = '/v3/firmware-images/{image_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']

        query_params = {}
        if 'updating_request_id' in params:
            query_params['updating_request_id'] = params['updating_request_id']
        if 'updating_ip_address' in params:
            query_params['updating_ip_address'] = params['updating_ip_address']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'created_at' in params:
            query_params['created_at'] = params['created_at']
        if 'updated_at' in params:
            query_params['updated_at'] = params['updated_at']
        if 'datafile_checksum' in params:
            query_params['datafile_checksum'] = params['datafile_checksum']
        if 'etag' in params:
            query_params['etag'] = params['etag']
        if 'object' in params:
            query_params['object'] = params['object']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FirmwareImageSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def firmware_manifest_create(self, datafile, name, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Create firmware manifest</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_create(datafile, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file datafile: The manifest file to create (required)
        :param str name: The name of the object (required)
        :param str description: The description of the object
        :return: FirmwareManifestSerializerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_manifest_create_with_http_info(datafile, name, **kwargs)
        else:
            (data) = self.firmware_manifest_create_with_http_info(datafile, name, **kwargs)
            return data

    def firmware_manifest_create_with_http_info(self, datafile, name, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Create firmware manifest</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_create_with_http_info(datafile, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file datafile: The manifest file to create (required)
        :param str name: The name of the object (required)
        :param str description: The description of the object
        :return: FirmwareManifestSerializerData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datafile', 'name', 'description']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_manifest_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datafile' is set
        if ('datafile' not in params) or (params['datafile'] is None):
            raise ValueError("Missing the required parameter `datafile` when calling `firmware_manifest_create`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `firmware_manifest_create`")

        resource_path = '/v3/firmware-manifests/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'datafile' in params:
            local_var_files['datafile'] = params['datafile']
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'name' in params:
            form_params.append(('name', params['name']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FirmwareManifestSerializerData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def firmware_manifest_destroy(self, manifest_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Delete firmware manifest</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_destroy(manifest_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int manifest_id: The ID of the firmware manifest (required)
        :return: FirmwareManifestSerializerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_manifest_destroy_with_http_info(manifest_id, **kwargs)
        else:
            (data) = self.firmware_manifest_destroy_with_http_info(manifest_id, **kwargs)
            return data

    def firmware_manifest_destroy_with_http_info(self, manifest_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Delete firmware manifest</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_destroy_with_http_info(manifest_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int manifest_id: The ID of the firmware manifest (required)
        :return: FirmwareManifestSerializerData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['manifest_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_manifest_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'manifest_id' is set
        if ('manifest_id' not in params) or (params['manifest_id'] is None):
            raise ValueError("Missing the required parameter `manifest_id` when calling `firmware_manifest_destroy`")

        resource_path = '/v3/firmware-manifests/{manifest_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'manifest_id' in params:
            path_params['manifest_id'] = params['manifest_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FirmwareManifestSerializerData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def firmware_manifest_list(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>List all firmware manifests</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: 
        :param str order: 
        :param str after: 
        :param str include: 
        :return: ManifestSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_manifest_list_with_http_info(**kwargs)
        else:
            (data) = self.firmware_manifest_list_with_http_info(**kwargs)
            return data

    def firmware_manifest_list_with_http_info(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>List all firmware manifests</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int limit: 
        :param str order: 
        :param str after: 
        :param str include: 
        :return: ManifestSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'order', 'after', 'include']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_manifest_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v3/firmware-manifests/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'include' in params:
            query_params['include'] = params['include']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ManifestSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def firmware_manifest_retrieve(self, manifest_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Retrieve firmware manifest</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_retrieve(manifest_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int manifest_id: The ID of the firmware manifest (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str name: 
        :param str description: 
        :param str created_at: 
        :param str updated_at: 
        :param str datafile_checksum: 
        :param str device_class: 
        :param str etag: 
        :param str object: 
        :param str timestamp: 
        :return: FirmwareManifestSerializerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.firmware_manifest_retrieve_with_http_info(manifest_id, **kwargs)
        else:
            (data) = self.firmware_manifest_retrieve_with_http_info(manifest_id, **kwargs)
            return data

    def firmware_manifest_retrieve_with_http_info(self, manifest_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating firmware manifests.  </p> <p>Retrieve firmware manifest</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.firmware_manifest_retrieve_with_http_info(manifest_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int manifest_id: The ID of the firmware manifest (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str name: 
        :param str description: 
        :param str created_at: 
        :param str updated_at: 
        :param str datafile_checksum: 
        :param str device_class: 
        :param str etag: 
        :param str object: 
        :param str timestamp: 
        :return: FirmwareManifestSerializerData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['manifest_id', 'updating_request_id', 'updating_ip_address', 'name', 'description', 'created_at', 'updated_at', 'datafile_checksum', 'device_class', 'etag', 'object', 'timestamp']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_manifest_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'manifest_id' is set
        if ('manifest_id' not in params) or (params['manifest_id'] is None):
            raise ValueError("Missing the required parameter `manifest_id` when calling `firmware_manifest_retrieve`")

        resource_path = '/v3/firmware-manifests/{manifest_id}/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'updating_request_id' in params:
            query_params['updating_request_id'] = params['updating_request_id']
        if 'updating_ip_address' in params:
            query_params['updating_ip_address'] = params['updating_ip_address']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'created_at' in params:
            query_params['created_at'] = params['created_at']
        if 'updated_at' in params:
            query_params['updated_at'] = params['updated_at']
        if 'datafile_checksum' in params:
            query_params['datafile_checksum'] = params['datafile_checksum']
        if 'device_class' in params:
            query_params['device_class'] = params['device_class']
        if 'etag' in params:
            query_params['etag'] = params['etag']
        if 'object' in params:
            query_params['object'] = params['object']
        if 'timestamp' in params:
            query_params['timestamp'] = params['timestamp']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'manifest_id' in params:
            form_params.append(('manifest_id', params['manifest_id']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FirmwareManifestSerializerData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
