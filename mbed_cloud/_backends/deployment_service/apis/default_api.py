# coding: utf-8

"""
    Deployment Service API

    This is the API Documentation for the mbed deployment service which is part of the update service.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def deploy_info_get(self, **kwargs):
        """
        
        <p>Reads the deploy_info.json file and returns the Build and Git ID to the caller.</p> <p>Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_info_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deploy_info_get_with_http_info(**kwargs)
        else:
            (data) = self.deploy_info_get_with_http_info(**kwargs)
            return data

    def deploy_info_get_with_http_info(self, **kwargs):
        """
        
        <p>Reads the deploy_info.json file and returns the Build and Git ID to the caller.</p> <p>Will return a 500 error if the file is missing, cannot be parsed or the keys are missing.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_info_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_info_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v3/ds_deploy_info'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_campaign_create(self, body, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Create update campaign</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_create(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param WriteUpdateCampaignSerializer body: Update campaign object to create (required)
        :return: UpdateCampaignSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_campaign_create_with_http_info(body, **kwargs)
        else:
            (data) = self.update_campaign_create_with_http_info(body, **kwargs)
            return data

    def update_campaign_create_with_http_info(self, body, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Create update campaign</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_create_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param WriteUpdateCampaignSerializer body: Update campaign object to create (required)
        :return: UpdateCampaignSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_campaign_create`")

        resource_path = '/v3/update-campaigns/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UpdateCampaignSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_campaign_destroy(self, campaign_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Delete update campaign</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_destroy(campaign_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str campaign_id: The ID of the update campaign (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str created_at: 
        :param str updated_at: 
        :param str attempts: 
        :param str description: 
        :param str device_filter: 
        :param str etag: 
        :param str finished: 
        :param str name: 
        :param str object: 
        :param str root_manifest_id: 
        :param str state: 
        :param str when: 
        :return: UpdateCampaignSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_campaign_destroy_with_http_info(campaign_id, **kwargs)
        else:
            (data) = self.update_campaign_destroy_with_http_info(campaign_id, **kwargs)
            return data

    def update_campaign_destroy_with_http_info(self, campaign_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Delete update campaign</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_destroy_with_http_info(campaign_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str campaign_id: The ID of the update campaign (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str created_at: 
        :param str updated_at: 
        :param str attempts: 
        :param str description: 
        :param str device_filter: 
        :param str etag: 
        :param str finished: 
        :param str name: 
        :param str object: 
        :param str root_manifest_id: 
        :param str state: 
        :param str when: 
        :return: UpdateCampaignSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id', 'updating_request_id', 'updating_ip_address', 'created_at', 'updated_at', 'attempts', 'description', 'device_filter', 'etag', 'finished', 'name', 'object', 'root_manifest_id', 'state', 'when']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_id' is set
        if ('campaign_id' not in params) or (params['campaign_id'] is None):
            raise ValueError("Missing the required parameter `campaign_id` when calling `update_campaign_destroy`")

        resource_path = '/v3/update-campaigns/{campaign_id}/'.replace('{format}', 'json')
        path_params = {}
        if 'campaign_id' in params:
            path_params['campaign_id'] = params['campaign_id']

        query_params = {}
        if 'updating_request_id' in params:
            query_params['updating_request_id'] = params['updating_request_id']
        if 'updating_ip_address' in params:
            query_params['updating_ip_address'] = params['updating_ip_address']
        if 'created_at' in params:
            query_params['created_at'] = params['created_at']
        if 'updated_at' in params:
            query_params['updated_at'] = params['updated_at']
        if 'attempts' in params:
            query_params['attempts'] = params['attempts']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'device_filter' in params:
            query_params['device_filter'] = params['device_filter']
        if 'etag' in params:
            query_params['etag'] = params['etag']
        if 'finished' in params:
            query_params['finished'] = params['finished']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'object' in params:
            query_params['object'] = params['object']
        if 'root_manifest_id' in params:
            query_params['root_manifest_id'] = params['root_manifest_id']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'when' in params:
            query_params['when'] = params['when']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UpdateCampaignSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_campaign_list(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>List all update campaigns</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str created_at: 
        :param str updated_at: 
        :param str attempts: 
        :param str campaign_id: 
        :param str description: 
        :param str device_filter: 
        :param str etag: 
        :param str finished: 
        :param str name: 
        :param str object: 
        :param str root_manifest_id: 
        :param str state: 
        :param str when: 
        :param int page: The page number to retrieve. If not given, then defaults to first page.
        :param str root_manifest_url: The firmware catalog URL for the manifest that will be sent to the device as part of the campaign
        :return: list[UpdateCampaignSerializer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_campaign_list_with_http_info(**kwargs)
        else:
            (data) = self.update_campaign_list_with_http_info(**kwargs)
            return data

    def update_campaign_list_with_http_info(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>List all update campaigns</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str created_at: 
        :param str updated_at: 
        :param str attempts: 
        :param str campaign_id: 
        :param str description: 
        :param str device_filter: 
        :param str etag: 
        :param str finished: 
        :param str name: 
        :param str object: 
        :param str root_manifest_id: 
        :param str state: 
        :param str when: 
        :param int page: The page number to retrieve. If not given, then defaults to first page.
        :param str root_manifest_url: The firmware catalog URL for the manifest that will be sent to the device as part of the campaign
        :return: list[UpdateCampaignSerializer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['updating_request_id', 'updating_ip_address', 'created_at', 'updated_at', 'attempts', 'campaign_id', 'description', 'device_filter', 'etag', 'finished', 'name', 'object', 'root_manifest_id', 'state', 'when', 'page', 'root_manifest_url']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v3/update-campaigns/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'updating_request_id' in params:
            query_params['updating_request_id'] = params['updating_request_id']
        if 'updating_ip_address' in params:
            query_params['updating_ip_address'] = params['updating_ip_address']
        if 'created_at' in params:
            query_params['created_at'] = params['created_at']
        if 'updated_at' in params:
            query_params['updated_at'] = params['updated_at']
        if 'attempts' in params:
            query_params['attempts'] = params['attempts']
        if 'campaign_id' in params:
            query_params['campaign_id'] = params['campaign_id']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'device_filter' in params:
            query_params['device_filter'] = params['device_filter']
        if 'etag' in params:
            query_params['etag'] = params['etag']
        if 'finished' in params:
            query_params['finished'] = params['finished']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'object' in params:
            query_params['object'] = params['object']
        if 'root_manifest_id' in params:
            query_params['root_manifest_id'] = params['root_manifest_id']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'when' in params:
            query_params['when'] = params['when']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'root_manifest_url' in params:
            query_params['root_manifest_url'] = params['root_manifest_url']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[UpdateCampaignSerializer]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_campaign_partial_update(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Update campaign fields</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_partial_update(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str campaign_id: DEPRECATED: The ID of the campaign
        :param str description: An optional description of the campaign
        :param str device_filter: The filter for the devices the campaign will target
        :param datetime finished: The timestamp when the update campaign finished
        :param str name: A name for this campaign
        :param str object: The API resource entity
        :param str root_manifest_id: 
        :param str state: The state of the campaign
        :param datetime when: The timestamp at which update campaign scheduled to start
        :return: UpdateCampaignSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_campaign_partial_update_with_http_info(**kwargs)
        else:
            (data) = self.update_campaign_partial_update_with_http_info(**kwargs)
            return data

    def update_campaign_partial_update_with_http_info(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Update campaign fields</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_partial_update_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str campaign_id: DEPRECATED: The ID of the campaign
        :param str description: An optional description of the campaign
        :param str device_filter: The filter for the devices the campaign will target
        :param datetime finished: The timestamp when the update campaign finished
        :param str name: A name for this campaign
        :param str object: The API resource entity
        :param str root_manifest_id: 
        :param str state: The state of the campaign
        :param datetime when: The timestamp at which update campaign scheduled to start
        :return: UpdateCampaignSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id', 'description', 'device_filter', 'finished', 'name', 'object', 'root_manifest_id', 'state', 'when']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_partial_update" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v3/update-campaigns/{campaign_id}/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'campaign_id' in params:
            form_params.append(('campaign_id', params['campaign_id']))
        if 'description' in params:
            form_params.append(('description', params['description']))
        if 'device_filter' in params:
            form_params.append(('device_filter', params['device_filter']))
        if 'finished' in params:
            form_params.append(('finished', params['finished']))
        if 'name' in params:
            form_params.append(('name', params['name']))
        if 'object' in params:
            form_params.append(('object', params['object']))
        if 'root_manifest_id' in params:
            form_params.append(('root_manifest_id', params['root_manifest_id']))
        if 'state' in params:
            form_params.append(('state', params['state']))
        if 'when' in params:
            form_params.append(('when', params['when']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UpdateCampaignSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_campaign_retrieve(self, campaign_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Retrieve campaign</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_retrieve(campaign_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str campaign_id: The ID of the campaign (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str created_at: 
        :param str updated_at: 
        :param str attempts: 
        :param str description: 
        :param str device_filter: 
        :param str etag: 
        :param str finished: 
        :param str name: 
        :param str object: 
        :param str root_manifest_id: 
        :param str state: 
        :param str when: 
        :param str root_manifest_url: The firmware catalog URL for the manifest that will be sent to the device as part of the campaign
        :return: UpdateCampaignSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_campaign_retrieve_with_http_info(campaign_id, **kwargs)
        else:
            (data) = self.update_campaign_retrieve_with_http_info(campaign_id, **kwargs)
            return data

    def update_campaign_retrieve_with_http_info(self, campaign_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Retrieve campaign</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_retrieve_with_http_info(campaign_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str campaign_id: The ID of the campaign (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str created_at: 
        :param str updated_at: 
        :param str attempts: 
        :param str description: 
        :param str device_filter: 
        :param str etag: 
        :param str finished: 
        :param str name: 
        :param str object: 
        :param str root_manifest_id: 
        :param str state: 
        :param str when: 
        :param str root_manifest_url: The firmware catalog URL for the manifest that will be sent to the device as part of the campaign
        :return: UpdateCampaignSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id', 'updating_request_id', 'updating_ip_address', 'created_at', 'updated_at', 'attempts', 'description', 'device_filter', 'etag', 'finished', 'name', 'object', 'root_manifest_id', 'state', 'when', 'root_manifest_url']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_id' is set
        if ('campaign_id' not in params) or (params['campaign_id'] is None):
            raise ValueError("Missing the required parameter `campaign_id` when calling `update_campaign_retrieve`")

        resource_path = '/v3/update-campaigns/{campaign_id}/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'updating_request_id' in params:
            query_params['updating_request_id'] = params['updating_request_id']
        if 'updating_ip_address' in params:
            query_params['updating_ip_address'] = params['updating_ip_address']
        if 'created_at' in params:
            query_params['created_at'] = params['created_at']
        if 'updated_at' in params:
            query_params['updated_at'] = params['updated_at']
        if 'attempts' in params:
            query_params['attempts'] = params['attempts']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'device_filter' in params:
            query_params['device_filter'] = params['device_filter']
        if 'etag' in params:
            query_params['etag'] = params['etag']
        if 'finished' in params:
            query_params['finished'] = params['finished']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'object' in params:
            query_params['object'] = params['object']
        if 'root_manifest_id' in params:
            query_params['root_manifest_id'] = params['root_manifest_id']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'when' in params:
            query_params['when'] = params['when']
        if 'root_manifest_url' in params:
            query_params['root_manifest_url'] = params['root_manifest_url']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'campaign_id' in params:
            form_params.append(('campaign_id', params['campaign_id']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UpdateCampaignSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_campaign_status(self, campaign_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Show the status of an update campaign</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_status(campaign_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str campaign_id: The ID of the update campaign (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str created_at: 
        :param str updated_at: 
        :param str attempts: 
        :param str description: 
        :param str device_filter: 
        :param str etag: 
        :param str finished: 
        :param str name: 
        :param str object: 
        :param str root_manifest_id: 
        :param str state: 
        :param str when: 
        :return: UpdateCampaignStatusSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_campaign_status_with_http_info(campaign_id, **kwargs)
        else:
            (data) = self.update_campaign_status_with_http_info(campaign_id, **kwargs)
            return data

    def update_campaign_status_with_http_info(self, campaign_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Show the status of an update campaign</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_status_with_http_info(campaign_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str campaign_id: The ID of the update campaign (required)
        :param str updating_request_id: 
        :param str updating_ip_address: 
        :param str created_at: 
        :param str updated_at: 
        :param str attempts: 
        :param str description: 
        :param str device_filter: 
        :param str etag: 
        :param str finished: 
        :param str name: 
        :param str object: 
        :param str root_manifest_id: 
        :param str state: 
        :param str when: 
        :return: UpdateCampaignStatusSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['campaign_id', 'updating_request_id', 'updating_ip_address', 'created_at', 'updated_at', 'attempts', 'description', 'device_filter', 'etag', 'finished', 'name', 'object', 'root_manifest_id', 'state', 'when']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'campaign_id' is set
        if ('campaign_id' not in params) or (params['campaign_id'] is None):
            raise ValueError("Missing the required parameter `campaign_id` when calling `update_campaign_status`")

        resource_path = '/v3/update-campaigns/{campaign_id}/status/'.replace('{format}', 'json')
        path_params = {}
        if 'campaign_id' in params:
            path_params['campaign_id'] = params['campaign_id']

        query_params = {}
        if 'updating_request_id' in params:
            query_params['updating_request_id'] = params['updating_request_id']
        if 'updating_ip_address' in params:
            query_params['updating_ip_address'] = params['updating_ip_address']
        if 'created_at' in params:
            query_params['created_at'] = params['created_at']
        if 'updated_at' in params:
            query_params['updated_at'] = params['updated_at']
        if 'attempts' in params:
            query_params['attempts'] = params['attempts']
        if 'description' in params:
            query_params['description'] = params['description']
        if 'device_filter' in params:
            query_params['device_filter'] = params['device_filter']
        if 'etag' in params:
            query_params['etag'] = params['etag']
        if 'finished' in params:
            query_params['finished'] = params['finished']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'object' in params:
            query_params['object'] = params['object']
        if 'root_manifest_id' in params:
            query_params['root_manifest_id'] = params['root_manifest_id']
        if 'state' in params:
            query_params['state'] = params['state']
        if 'when' in params:
            query_params['when'] = params['when']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UpdateCampaignStatusSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_campaign_update(self, body, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Update campaign</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_update(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param WriteUpdateCampaignSerializer body: Update campaign object to create (required)
        :return: UpdateCampaignSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_campaign_update_with_http_info(body, **kwargs)
        else:
            (data) = self.update_campaign_update_with_http_info(body, **kwargs)
            return data

    def update_campaign_update_with_http_info(self, body, **kwargs):
        """
        
        <p>The APIs for creating and manipulating update campaigns. Update campaigns are used to control firmware update to a list of devices specified by a filter.  </p> <p>Update campaign</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_campaign_update_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param WriteUpdateCampaignSerializer body: Update campaign object to create (required)
        :return: UpdateCampaignSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_campaign_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_campaign_update`")

        resource_path = '/v3/update-campaigns/{campaign_id}/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UpdateCampaignSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
