# coding: utf-8

"""
    Provisioning endpoints - the factory provisioning package.

    The factory provisioning package needs to be installed in factories to enroll devices onto the mbed Cloud ecosystem.  These APIs allow downloading the most recent version of the factory provisioning package for various operating systems. 

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AListOfDownloadableFactoryToolVersions_(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, lin_archive_info=None, win_archive_info=None):
        """
        AListOfDownloadableFactoryToolVersions_ - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'lin_archive_info': 'FactoryToolDownload',
            'win_archive_info': 'FactoryToolDownload'
        }

        self.attribute_map = {
            'lin_archive_info': 'linArchiveInfo',
            'win_archive_info': 'winArchiveInfo'
        }

        self._lin_archive_info = lin_archive_info
        self._win_archive_info = win_archive_info

    @property
    def lin_archive_info(self):
        """
        Gets the lin_archive_info of this AListOfDownloadableFactoryToolVersions_.

        :return: The lin_archive_info of this AListOfDownloadableFactoryToolVersions_.
        :rtype: FactoryToolDownload
        """
        return self._lin_archive_info

    @lin_archive_info.setter
    def lin_archive_info(self, lin_archive_info):
        """
        Sets the lin_archive_info of this AListOfDownloadableFactoryToolVersions_.

        :param lin_archive_info: The lin_archive_info of this AListOfDownloadableFactoryToolVersions_.
        :type: FactoryToolDownload
        """

        self._lin_archive_info = lin_archive_info

    @property
    def win_archive_info(self):
        """
        Gets the win_archive_info of this AListOfDownloadableFactoryToolVersions_.

        :return: The win_archive_info of this AListOfDownloadableFactoryToolVersions_.
        :rtype: FactoryToolDownload
        """
        return self._win_archive_info

    @win_archive_info.setter
    def win_archive_info(self, win_archive_info):
        """
        Sets the win_archive_info of this AListOfDownloadableFactoryToolVersions_.

        :param win_archive_info: The win_archive_info of this AListOfDownloadableFactoryToolVersions_.
        :type: FactoryToolDownload
        """

        self._win_archive_info = win_archive_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
