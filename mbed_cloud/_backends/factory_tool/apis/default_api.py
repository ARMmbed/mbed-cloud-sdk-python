# coding: utf-8

"""
    Provisioning endpoints - the factory provisioning package.

    The factory provisioning package needs to be installed in factories to enroll devices onto the mbed Cloud ecosystem.  These APIs allow downloading the most recent version of the factory provisioning package for various operating systems. 

    OpenAPI spec version: 0.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def downloads_mbed_factory_provisioning_package_get(self, os, **kwargs):
        """
        Returns a specific Factory Tool package in a ZIP archive. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.downloads_mbed_factory_provisioning_package_get(os, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str os: Requires Factory Tool OS name (Windows or Linux). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.downloads_mbed_factory_provisioning_package_get_with_http_info(os, **kwargs)
        else:
            (data) = self.downloads_mbed_factory_provisioning_package_get_with_http_info(os, **kwargs)
            return data

    def downloads_mbed_factory_provisioning_package_get_with_http_info(self, os, **kwargs):
        """
        Returns a specific Factory Tool package in a ZIP archive. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.downloads_mbed_factory_provisioning_package_get_with_http_info(os, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str os: Requires Factory Tool OS name (Windows or Linux). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['os']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method downloads_mbed_factory_provisioning_package_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'os' is set
        if ('os' not in params) or (params['os'] is None):
            raise ValueError("Missing the required parameter `os` when calling `downloads_mbed_factory_provisioning_package_get`")


        collection_formats = {}

        resource_path = '/downloads/mbed_factory_provisioning_package'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'os' in params:
            query_params['os'] = params['os']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def downloads_mbed_factory_provisioning_package_info_get(self, **kwargs):
        """
        Gets a list of downloadable Factory Tool versions. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.downloads_mbed_factory_provisioning_package_info_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AListOfDownloadableFactoryToolVersions_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.downloads_mbed_factory_provisioning_package_info_get_with_http_info(**kwargs)
        else:
            (data) = self.downloads_mbed_factory_provisioning_package_info_get_with_http_info(**kwargs)
            return data

    def downloads_mbed_factory_provisioning_package_info_get_with_http_info(self, **kwargs):
        """
        Gets a list of downloadable Factory Tool versions. * mbed Cloud user role must be Administrator. * mbed Cloud account must have Factory Tool downloads enabled. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.downloads_mbed_factory_provisioning_package_info_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AListOfDownloadableFactoryToolVersions_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method downloads_mbed_factory_provisioning_package_info_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/downloads/mbed_factory_provisioning_package/info'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AListOfDownloadableFactoryToolVersions_',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
