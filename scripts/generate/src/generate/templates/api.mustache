import os

import requests
import dotenv

from mbed_cloud import utils
from mbed_cloud import pagination
from mbed_cloud.core import common


dotenv.load_dotenv(dotenv.find_dotenv(usecwd=True))
DEFAULT_HOST = 'https://api.us-east-1.mbedcloud.com'

def pluck_if_not_none(source, *pluck):
    return {k: source[k] for k in pluck if source[k] is not None}

def strip_none_values(dictionary):
    return {k: v for k, v in dictionary.items() if v is not None}
{{#entities}}


class {{_key.pascal}}(common.Entity):
    """Represents the remote `{{_key.pascal}}` entity in Mbed Cloud"""

    def __init__(self{{#fields}}, {{_key.snake}}=None{{/fields}}):
        """Creates a local `{{_key.pascal}}` instance

        {{#fields}}
        :param {{_key.snake}}: {{description}}
        :type {{_key.snake}}: {{type}}
        {{/fields}}
        """
        super({{_key.pascal}}).__init__()
        {{#fields}}
        self.{{_key.snake}} = {{_key.snake}}
        {{/fields}}
        self._fieldnames = [
            {{#fields}}
            '{{_key.snake}}',
            {{/fields}}
        ]

    def __repr__(self):
        return repr({k: v for k, v in vars(self).items() if k in self._fieldnames})

    {{#modes}}
    def {{mode}}(
        self{{#fields_external}},{{/fields_external}}
        {{#fields_external}}
        {{_key.snake}},
        {{/fields_external}}
    ):
        """{{summary}}
        """
        {{#fields_path}}
        path_params = {
        {{/fields_path}}
            {{#fields_path_internal}}
            '{{api_fieldname}}': self.{{_key.snake}},
            {{/fields_path_internal}}
            {{#fields_path_external}}
            '{{api_fieldname}}': {{_key.snake}},
            {{/fields_path_external}}
        {{#fields_path}}
        }
        {{/fields_path}}
        {{#fields_query}}
        query_params = {
        {{/fields_query}}
            {{#fields_query_internal}}
            '{{api_fieldname}}': self.{{_key.snake}},
            {{/fields_query_internal}}
            {{#fields_query_external}}
            '{{api_fieldname}}': {{_key.snake}},
            {{/fields_query_external}}
        {{#fields_query}}
        }
        {{/fields_query}}
        {{#fields_body}}
        body_params = {
        {{/fields_body}}
            {{#fields_body_internal}}
            '{{api_fieldname}}': self.{{_key.snake}},
            {{/fields_body_internal}}
            {{#fields_body_external}}
            '{{api_fieldname}}': {{_key.snake}},
            {{/fields_body_external}}
        {{#fields_body}}
        }
        {{/fields_body}}
        {{#fields_headers}}
        header_params = {
        {{/fields_headers}}
            {{#fields_headers_internal}}
            '{{api_fieldname}}': self.{{_key.snake}},
            {{/fields_headers_internal}}
            {{#fields_headers_external}}
            '{{api_fieldname}}': {{_key.snake}},
            {{/fields_headers_external}}
        {{#fields_headers}}
        }
        {{/fields_headers}}
        {{#field_renames}}
        inbound_renames = {
            {{#field_renames}}
            '{{api_fieldname}}': '{{_key.snake}}',
            {{/field_renames}}
        }
        {{/field_renames}}
        return self.call_api(
            method='{{method}}',
            url='{host}{{path}}'.format(host=self._auth_host or DEFAULT_HOST{{#fields_path}}, **path_params{{/fields_path}}),
            json=data,
            params=query,
            headers=headers,
            inbound_renames=inbound_renames,
        )
    {{/modes}}
{{/entities}}
