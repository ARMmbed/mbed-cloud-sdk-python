"""
Entities module

This file is autogenerated from api specifications
"""

# Python 2 compatibility
from __future__ import unicode_literals
from builtins import str #  noqa
from builtins import super

from mbed_cloud.pagination import PaginatedResponse
from mbed_cloud.sdk.common.entity import Entity
from mbed_cloud.sdk.common import _enums as enums
from mbed_cloud.sdk.common import fields


class InstanceFactory:
    """Creates instances of Entities with a client mixed in"""
    def __init__(self, client):
        """InstanceFactory takes a client to attach to the models it creates"""
        self.client = client

    {% for entity in entities %}
    def {{ entity._key.snake }}(self, **kwargs):
        """
        :rtype: {{ entity._key.pascal }}
        """
        return {{ entity._key.pascal }}(client=self.client, **kwargs)
    {% endfor %}

{% for entity in entities %}


class {{ entity._key.pascal }}(Entity):
    """Represents the `{{entity._key.pascal}}` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = [
        {% for field in entity.fields %}
        '{{field._key.snake}}',
        {% endfor %}
    ]

    # common renames used when mapping {<API spec>: <SDK>}
    _renames = {
        {% for rename in entity.field_renames %}
        '{{rename.api_fieldname}}': '{{rename._key.snake}}',
        {% endfor %}
    }

    def __init__(
        self, client=None{% if entity.fields %},{% endif %}
        {% for field in entity.fields %}
            {{field._key.snake}}=None,
        {% endfor %}
    ):
        """Creates a local `{{entity._key.pascal}}` instance

        {% for field in entity.fields %}:param {{field._key.snake}}: {{ (field.description or '')|wordwrap(width=66)|indent(width=12) }}
        :type {{field._key.snake}}: {{field.type}}
        {% endfor %}"""

        super().__init__(client=client)

        # fields
        {% for field in entity.fields %}self._{{field._key.snake}} = fields.{{field.python_field}}(
            value={{field._key.snake}}
            {% if field.enum_reference %},
            enum=enums.{{ field.enum_reference.pascal }}
            {% endif %}
            {% if field['items'] and field['items'].foreign_key %},
            entity={{ field['items'].foreign_key.entity.pascal }}
            {% endif %}
            {% if field.foreign_key %},
            entity={{ field.foreign_key.entity.pascal }}
            {% endif %}
        )
        {% endfor %}

    {% for field in entity.fields %}
    @property
    def {{field._key.snake}}(self):
        """{{ (field.description or '')|wordwrap(width=78)|indent(width=8) }}
        {% if field.example %}
        api example: {{ field.example|repr|wordwrap(width=78)|indent(width=12) }}
        {% endif %}
        :rtype: {{ field.python_type }}
        """
        return self._{{field._key.snake}}.value
    {% if not field.read_only and not field=='id' %}
    @{{ field._key.snake }}.setter
    def {{field._key.snake}}(self, value):
        """Set value of `{{ field._key.snake }}`

        :param value: value to set
        :type value: {{ field.python_type }}
        """
        self._{{field._key.snake}}.set(value)
    {% endif %}
    {% endfor %}

    {% for mode in entity.modes %}
    def {{mode._key.snake}}(
        self
        {% for field in mode.fields|pargs_kwargs %}
            {% if field.external_param %},
                {% if field.required %}
                    {{field._key.snake}}
                {% else %}
                    {{field._key.snake}}={{ field.default|repr }}
                {% endif %}
            {% endif %}
        {% endfor %}
    ):
        """{{mode.summary}}

        api documentation:
        https://os.mbed.com/search/?q=service+apis+{{ mode.path }}
        {% for field in mode.fields %}{% if field.external_param %}
        :param {{field._key.snake}}: {{ field.description|wordwrap(width=70)|indent(width=12) }}
        :type {{field._key.snake}}: {{field.type}}
        {% endif %}{% endfor %}"""

    {% if mode.pagination %}
        {# continuing from the outer, 'public' definition ... #}
        def mapper(api_data):
            return {{ mode.foreign_key.entity.pascal }}()._from_api(**api_data)

        return PaginatedResponse(
            func=self._{{mode._key.snake}},
            lwrap_type=mapper,
            {% for field in mode.fields %}{% if field.external_param %}{{field._key.snake}}={{field._key.snake}},
            {% endif %}
            {% endfor %}
        )

    def _{{mode._key.snake}}(
        self
        {% for field in mode.fields|pargs_kwargs %}
            {% if field.external_param %},
                {% if field.required %}
                    {{field._key.snake}}
                {% else %}
                    {{field._key.snake}}=None
                {% endif %}
            {% endif %}
        {% endfor %}
    ):
        """Internal 'next-page' behaviour for pagination"""
    {% endif %}
        return self._call_api(
            method='{{mode.method}}',
            path='{{ mode.path }}',
            {% for param_in, count in mode.params_in.items() %}
                {% if count %}
                {{ param_in }}_params = {
                    {% for field in mode.fields %}
                    {% if field['in'] == param_in %}
                    '{{field.parameter_fieldname}}':
                        {% if field.external_param %}
                            fields.{{ field.python_field }}({{field._key.snake}}{% if field.enum_reference %}, enum=enums.{{ field.enum_reference.pascal }}{% endif %}).to_api()
                        {% else %}
                            self._{{field._key.snake}}.to_api()
                        {% endif %},
                    {% endif %}
                    {% endfor %}
                },
                {% endif %}
            {% endfor %}
            {% if mode.pagination %}
            unpack = False,
            {% endif %}
        )
    {% endfor %}
{% endfor %}
