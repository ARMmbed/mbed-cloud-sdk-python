"""
Entity module

This file is autogenerated from api specifications
"""

# Python 2 compatibility
from __future__ import unicode_literals
from builtins import str  # noqa
from builtins import super

from mbed_cloud.sdk.common.entity import Entity
from mbed_cloud.sdk.common import fields
from mbed_cloud.sdk import enums

{% for entity in entities %}


class {{ entity._key|to_pascal }}(Entity):
    """Represents the `{{entity._key|to_pascal}}` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = [
        {% for field in entity.fields %}
        '{{field._key|to_snake}}',
        {% endfor %}
    ]

    # common renames used when mapping {% raw %}{<API spec>: <SDK>}{% endraw %}
    _renames = {
        {% for rename in entity.field_renames %}
        '{{rename.api_fieldname}}': '{{rename._key|to_snake}}',
        {% endfor %}
    }

    def __init__(
        self, _client=None{% if entity.fields %},{% endif %}
        {% for field in entity.fields %}
            {{field._key|to_snake}}=None,
        {% endfor %}
    ):
        """Creates a local `{{entity._key|to_pascal}}` instance

        {% for field in entity.fields %}:param {{field._key|to_snake}}: {{ (field.description or '')|wordwrap(width=66)|indent(width=12) }}
        :type {{field._key|to_snake}}: {{field.python_type}}
        {% endfor %}"""

        super().__init__(_client=_client)

        # inline imports for avoiding circular references and bulk imports
        {% for field in entity.fields %}{% set fkey = field.foreign_key or (field['items'] and field['items'].foreign_key) %}{% if fkey and fkey.entity.name != entity._key.name%}
        from mbed_cloud.sdk._modules.{{ fkey.group|to_snake }}.{{ fkey.entity|to_snake }} import {{ fkey.entity|to_pascal }}{% endif %}{% endfor %}

        # fields
        {% for field in entity.fields %}self._{{field._key|to_snake}} = fields.{{field.python_field}}(
            value={{field._key|to_snake}}
            {% if field.enum_reference %}
            , enum=enums.{{ field.enum_reference|to_pascal }}
            {% endif %}
            {% set fkey = field.foreign_key or (field['items'] and field['items'].foreign_key) %}{% if fkey %}
            , entity={{ fkey.entity|to_pascal }}
            {% endif %}
        )
        {% endfor %}

    {% for field in entity.fields %}
    @property
    def {{field._key|to_snake}}(self):
        """{{ (field.description or '')|wordwrap(width=78)|indent(width=8) }}
        {% if field.example %}
        api example: {{ field.example|repr|wordwrap(width=78)|indent(width=12) }}
        {% endif %}
        :rtype: {{ field.python_type }}{% if field['items'] and field['items'].foreign_key %}[{{ field['items'].foreign_key.entity|to_pascal }}]{% endif %}{% if field.foreign_key %}[{{ field.foreign_key.entity|to_pascal }}]{% endif %}
        """
        return self._{{field._key|to_snake}}.value
    {% if not field.read_only and not field=='id' %}
    @{{ field._key|to_snake }}.setter
    def {{field._key|to_snake}}(self, value):
        """Set value of `{{ field._key|to_snake }}`

        :param value: value to set
        :type value: {{ field.python_type }}{% if field['items'] and field['items'].foreign_key %}[{{ field['items'].foreign_key.entity|to_pascal }}]{% endif %}{% if field.foreign_key %}[{{ field.foreign_key.entity|to_pascal }}]{% endif %}
        """
        self._{{field._key|to_snake}}.set(value)
    {% endif %}
    {% endfor %}

    {% for mode in entity.modes|sort(attribute='_key|to_snake') %}
    def {% if mode.private_method %}_{% endif %}{{mode._key|to_snake}}(
        self
        {% for field in mode.fields|sort_parg_kwarg %}
            {% if field.external_param %},
                {% if field.required %}
                    {{field._key|to_snake}}
                {% else %}
                    {{field._key|to_snake}}={{ field.default|repr }}
                {% endif %}
            {% endif %}
        {% endfor %}
    ):
        """{{mode.summary}}

        {% if mode.path %}api documentation:
        https://os.mbed.com/search/?q=service+apis+{{ mode.path }}{% endif %}
        {% for field in mode.fields %}{% if field.external_param %}
        :param {{field._key|to_snake}}: {{ (field.description or field.foreign_key.entity|to_pascal)|wordwrap(width=70)|indent(width=12) }}
        :type {{field._key|to_snake}}: {{ (field.foreign_key and 'mbed_cloud.sdk.entities.' + field.foreign_key.entity|to_pascal) or field.python_type}}
        {% endif %}{% endfor %}
        :rtype: {% if mode.pagination %}mbed_cloud.pagination.PaginatedResponse{% else %}{{ (mode.defer_to_foreign_key_field and mode.defer_to_foreign_key_field.foreign_key.entity|to_pascal) or entity._key|to_pascal }}{% endif %}
        """
    {% for field in mode.fields %}
        {% if field.set_foreign_key_properties %}
            {% for set_on_other, set_from_self in field.set_foreign_key_properties.items() %}
        {{field.entity_fieldname}}.{{ set_on_other }} = self.{{ set_from_self }}
            {% endfor %}
        {% endif %}
    {% endfor %}
    {% if mode.defer_to_foreign_key_field %}
        return {{ mode.defer_to_foreign_key_field.field }}.{{ mode.defer_to_foreign_key_field.method }}()
    {% elif mode.custom_method %}
        from mbed_cloud.sdk.common._custom_methods import {{ mode.custom_method }}
        {% if mode.foreign_key %}from mbed_cloud.sdk.entities import {{ mode.foreign_key.entity|to_pascal }}{% endif %}

        return {{ mode.custom_method }}(
            self=self,
            foreign_key={% if mode.foreign_key %}{{ mode.foreign_key.entity|to_pascal }}{% else %}self.__class__{% endif %}
            {% for field in mode.fields|pargs_kwargs %}
                {% if field.external_param %},
                    {{field._key|to_snake}}={{field._key|to_snake}}
                {% endif %}
            {% endfor %}
            {% if mode.pagination %},wraps=self._{{ mode.paginate_target }}{% endif %}
        )
    {% else %}
        return self._client.call_api(
            method='{{mode.method}}',
            path='{{ mode.path }}',
            {% for param_in, count in mode.python_params_in.items() %}
                {% if count %}
                {{ param_in }}_params = {% if not mode.__REPLACE_BODY or param_in != 'body' %}{% raw %}{{% endraw %}{% endif %}
                    {% for field in mode.fields %}
                    {% if field['in'] == param_in %}
                    {% if not mode.__REPLACE_BODY or param_in != 'body' %}
                        '{{field.parameter_fieldname}}':
                    {% endif %}
                        {% if field.external_param %}
                            fields.{{ field.python_field }}({{field._key|to_snake}}{% if field.enum_reference %}, enum=enums.{{ field.enum_reference|to_pascal }}{% endif %}).to_api()
                        {% else %}
                            self._{{field._key|to_snake}}.to_api()
                        {% endif %}
                    {% if not mode.__REPLACE_BODY or param_in != 'body' %},{% endif %}
                    {% endif %}
                    {% endfor %}
                {% if not mode.__REPLACE_BODY or param_in != 'body' %}{% raw %}}{% endraw %}{% endif %},
                {% endif %}
            {% endfor %}
            {% if mode.pagination %}
            unpack = False,
            {% else %}
            unpack = self,
            {% endif %}
        )
    {% endif %}
    {% endfor %}
{% endfor %}
