"""
Entity module

This file is autogenerated from api specifications
"""

# Python 2 compatibility
from __future__ import unicode_literals
from builtins import str  # noqa
from builtins import super

from mbed_cloud.sdk.common.entity import Entity
from mbed_cloud.sdk.common import fields
from mbed_cloud.sdk import enums


class Certificate(Entity):
    """Represents the `Certificate` entity in Mbed Cloud"""

    # all fields available on this entity
    _fieldnames = [
        "account_id",
        "certificate",
        "created_at",
        "description",
        "developer_certificate",
        "developer_private_key",
        "device_execution_mode",
        "enrollment_mode",
        "id",
        "issuer",
        "name",
        "owner_id",
        "security_file_content",
        "service",
        "status",
        "subject",
        "updated_at",
        "validity",
    ]

    # common renames used when mapping {<API spec>: <SDK>}
    _renames = {"cert-id": "id"}

    def __init__(
        self,
        _client=None,
        account_id=None,
        certificate=None,
        created_at=None,
        description=None,
        developer_certificate=None,
        developer_private_key=None,
        device_execution_mode=None,
        enrollment_mode=None,
        id=None,
        issuer=None,
        name=None,
        owner_id=None,
        security_file_content=None,
        service=None,
        status=None,
        subject=None,
        updated_at=None,
        validity=None,
    ):
        """Creates a local `Certificate` instance

        :param account_id: The UUID of the account.
        :type account_id: str
        :param certificate: X509.v3 trusted certificate in PEM format.
        :type certificate: str
        :param created_at: Creation UTC time RFC3339.
        :type created_at: datetime
        :param description: Human readable description of this certificate.
        :type description: str
        :param developer_certificate: PEM format X.509 developer certificate.
        :type developer_certificate: str
        :param developer_private_key: PEM format developer private key associated to the certificate.
        :type developer_private_key: str
        :param device_execution_mode: Device execution mode where 1 means a developer certificate.
        :type device_execution_mode: int
        :param enrollment_mode: If true, signature is not required. Default value false.
        :type enrollment_mode: bool
        :param id: Entity ID.
        :type id: str
        :param issuer: Issuer of the certificate.
        :type issuer: str
        :param name: Certificate name.
        :type name: str
        :param owner_id: The UUID of the owner.
        :type owner_id: str
        :param security_file_content: Content of the security.c file that will be flashed into the
            device to provide the security credentials
        :type security_file_content: str
        :param service: Service name where the certificate is to be used.
        :type service: str
        :param status: Status of the certificate.
        :type status: str
        :param subject: Subject of the certificate.
        :type subject: str
        :param updated_at: Last update UTC time RFC3339.
        :type updated_at: datetime
        :param validity: Expiration time in UTC formatted as RFC3339.
        :type validity: datetime
        """

        super().__init__(_client=_client)

        # inline imports for avoiding circular references and bulk imports

        # fields
        self._account_id = fields.StringField(value=account_id)
        self._certificate = fields.StringField(value=certificate)
        self._created_at = fields.DateTimeField(value=created_at)
        self._description = fields.StringField(value=description)
        self._developer_certificate = fields.StringField(value=developer_certificate)
        self._developer_private_key = fields.StringField(value=developer_private_key)
        self._device_execution_mode = fields.IntegerField(value=device_execution_mode)
        self._enrollment_mode = fields.BooleanField(value=enrollment_mode)
        self._id = fields.StringField(value=id)
        self._issuer = fields.StringField(value=issuer)
        self._name = fields.StringField(value=name)
        self._owner_id = fields.StringField(value=owner_id)
        self._security_file_content = fields.StringField(value=security_file_content)
        self._service = fields.StringField(
            value=service, enum=enums.CertificateServiceEnum
        )
        self._status = fields.StringField(
            value=status, enum=enums.CertificateStatusEnum
        )
        self._subject = fields.StringField(value=subject)
        self._updated_at = fields.DateTimeField(value=updated_at)
        self._validity = fields.DateTimeField(value=validity)

    @property
    def account_id(self):
        """The UUID of the account.
        
        api example: '01619571e2e90242ac12000600000000'
        
        :rtype: str
        """
        return self._account_id.value

    @account_id.setter
    def account_id(self, value):
        """Set value of `account_id`

        :param value: value to set
        :type value: str
        """
        self._account_id.set(value)

    @property
    def certificate(self):
        """X509.v3 trusted certificate in PEM format.
        
        api example: '-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----'
        
        :rtype: str
        """
        return self._certificate.value

    @certificate.setter
    def certificate(self, value):
        """Set value of `certificate`

        :param value: value to set
        :type value: str
        """
        self._certificate.set(value)

    @property
    def created_at(self):
        """Creation UTC time RFC3339.
        
        api example: '2018-02-13T09:35:20Z'
        
        :rtype: datetime
        """
        return self._created_at.value

    @created_at.setter
    def created_at(self, value):
        """Set value of `created_at`

        :param value: value to set
        :type value: datetime
        """
        self._created_at.set(value)

    @property
    def description(self):
        """Human readable description of this certificate.
        
        api example: 'Certificate created by me.'
        
        :rtype: str
        """
        return self._description.value

    @description.setter
    def description(self, value):
        """Set value of `description`

        :param value: value to set
        :type value: str
        """
        self._description.set(value)

    @property
    def developer_certificate(self):
        """PEM format X.509 developer certificate.
        
        :rtype: str
        """
        return self._developer_certificate.value

    @developer_certificate.setter
    def developer_certificate(self, value):
        """Set value of `developer_certificate`

        :param value: value to set
        :type value: str
        """
        self._developer_certificate.set(value)

    @property
    def developer_private_key(self):
        """PEM format developer private key associated to the certificate.
        
        :rtype: str
        """
        return self._developer_private_key.value

    @developer_private_key.setter
    def developer_private_key(self, value):
        """Set value of `developer_private_key`

        :param value: value to set
        :type value: str
        """
        self._developer_private_key.set(value)

    @property
    def device_execution_mode(self):
        """Device execution mode where 1 means a developer certificate.
        
        api example: 1
        
        :rtype: int
        """
        return self._device_execution_mode.value

    @device_execution_mode.setter
    def device_execution_mode(self, value):
        """Set value of `device_execution_mode`

        :param value: value to set
        :type value: int
        """
        self._device_execution_mode.set(value)

    @property
    def enrollment_mode(self):
        """If true, signature is not required. Default value false.
        
        :rtype: bool
        """
        return self._enrollment_mode.value

    @enrollment_mode.setter
    def enrollment_mode(self, value):
        """Set value of `enrollment_mode`

        :param value: value to set
        :type value: bool
        """
        self._enrollment_mode.set(value)

    @property
    def id(self):
        """Entity ID.
        
        api example: '01619571d01d0242ac12000600000000'
        
        :rtype: str
        """
        return self._id.value

    @id.setter
    def id(self, value):
        """Set value of `id`

        :param value: value to set
        :type value: str
        """
        self._id.set(value)

    @property
    def issuer(self):
        """Issuer of the certificate.
        
        api example: 'CN=issuer'
        
        :rtype: str
        """
        return self._issuer.value

    @issuer.setter
    def issuer(self, value):
        """Set value of `issuer`

        :param value: value to set
        :type value: str
        """
        self._issuer.set(value)

    @property
    def name(self):
        """Certificate name.
        
        api example: 'My certificate'
        
        :rtype: str
        """
        return self._name.value

    @name.setter
    def name(self, value):
        """Set value of `name`

        :param value: value to set
        :type value: str
        """
        self._name.set(value)

    @property
    def owner_id(self):
        """The UUID of the owner.
        
        api example: '01619571dad80242ac12000600000000'
        
        :rtype: str
        """
        return self._owner_id.value

    @owner_id.setter
    def owner_id(self, value):
        """Set value of `owner_id`

        :param value: value to set
        :type value: str
        """
        self._owner_id.set(value)

    @property
    def security_file_content(self):
        """Content of the security.c file that will be flashed into the device to provide
        the security credentials
        
        :rtype: str
        """
        return self._security_file_content.value

    @security_file_content.setter
    def security_file_content(self, value):
        """Set value of `security_file_content`

        :param value: value to set
        :type value: str
        """
        self._security_file_content.set(value)

    @property
    def service(self):
        """Service name where the certificate is to be used.
        
        :rtype: str
        """
        return self._service.value

    @service.setter
    def service(self, value):
        """Set value of `service`

        :param value: value to set
        :type value: str
        """
        self._service.set(value)

    @property
    def status(self):
        """Status of the certificate.
        
        api example: 'ACTIVE'
        
        :rtype: str
        """
        return self._status.value

    @status.setter
    def status(self, value):
        """Set value of `status`

        :param value: value to set
        :type value: str
        """
        self._status.set(value)

    @property
    def subject(self):
        """Subject of the certificate.
        
        api example: 'CN=subject'
        
        :rtype: str
        """
        return self._subject.value

    @subject.setter
    def subject(self, value):
        """Set value of `subject`

        :param value: value to set
        :type value: str
        """
        self._subject.set(value)

    @property
    def updated_at(self):
        """Last update UTC time RFC3339.
        
        api example: '2018-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._updated_at.value

    @updated_at.setter
    def updated_at(self, value):
        """Set value of `updated_at`

        :param value: value to set
        :type value: datetime
        """
        self._updated_at.set(value)

    @property
    def validity(self):
        """Expiration time in UTC formatted as RFC3339.
        
        api example: '2038-02-14T15:24:14Z'
        
        :rtype: datetime
        """
        return self._validity.value

    @validity.setter
    def validity(self, value):
        """Set value of `validity`

        :param value: value to set
        :type value: datetime
        """
        self._validity.set(value)
