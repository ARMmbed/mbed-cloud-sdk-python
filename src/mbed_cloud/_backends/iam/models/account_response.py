# coding: utf-8

"""
    Account Management API

    API for managing accounts, users, creating API keys, uploading trusted certificates

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccountResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'display_name': 'str',
        'id': 'str',
        'parent_id': 'str',
        'status': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'display_name': 'display_name',
        'id': 'id',
        'parent_id': 'parentId',
        'status': 'status'
    }

    def __init__(self, alias=None, display_name=None, id=None, parent_id=None, status=None):
        """
        AccountResponse - a model defined in Swagger
        """

        self._alias = alias
        self._display_name = display_name
        self._id = id
        self._parent_id = parent_id
        self._status = status
        self.discriminator = None

    @property
    def alias(self):
        """
        Gets the alias of this AccountResponse.
        Alias of the account.

        :return: The alias of this AccountResponse.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """
        Sets the alias of this AccountResponse.
        Alias of the account.

        :param alias: The alias of this AccountResponse.
        :type: str
        """

        self._alias = alias

    @property
    def display_name(self):
        """
        Gets the display_name of this AccountResponse.
        The display name for the account.

        :return: The display_name of this AccountResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this AccountResponse.
        The display name for the account.

        :param display_name: The display_name of this AccountResponse.
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """
        Gets the id of this AccountResponse.
        The UUID of the account.

        :return: The id of this AccountResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AccountResponse.
        The UUID of the account.

        :param id: The id of this AccountResponse.
        :type: str
        """

        self._id = id

    @property
    def parent_id(self):
        """
        Gets the parent_id of this AccountResponse.
        The UUID of the parent account, if it has any.

        :return: The parent_id of this AccountResponse.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this AccountResponse.
        The UUID of the parent account, if it has any.

        :param parent_id: The parent_id of this AccountResponse.
        :type: str
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def status(self):
        """
        Gets the status of this AccountResponse.
        The status of the account.

        :return: The status of this AccountResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AccountResponse.
        The status of the account.

        :param status: The status of this AccountResponse.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AccountResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
