# coding: utf-8

"""
    Firmware Catalog API

    This is the API Documentation for the mbed firmware catalog service which is part of the update service.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class FirmwareImageSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, datafile=None, description=None, created_at=None, object=None, updated_at=None, image_id=None, etag=None, datafile_checksum=None, id=None, name=None):
        """
        FirmwareImageSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'datafile': 'str',
            'description': 'str',
            'created_at': 'datetime',
            'object': 'str',
            'updated_at': 'datetime',
            'image_id': 'str',
            'etag': 'datetime',
            'datafile_checksum': 'str',
            'id': 'str',
            'name': 'str'
        }

        self.attribute_map = {
            'datafile': 'datafile',
            'description': 'description',
            'created_at': 'created_at',
            'object': 'object',
            'updated_at': 'updated_at',
            'image_id': 'image_id',
            'etag': 'etag',
            'datafile_checksum': 'datafile_checksum',
            'id': 'id',
            'name': 'name'
        }

        self._datafile = datafile
        self._description = description
        self._created_at = created_at
        self._object = object
        self._updated_at = updated_at
        self._image_id = image_id
        self._etag = etag
        self._datafile_checksum = datafile_checksum
        self._id = id
        self._name = name

    @property
    def datafile(self):
        """
        Gets the datafile of this FirmwareImageSerializer.
        The binary file of firmware image

        :return: The datafile of this FirmwareImageSerializer.
        :rtype: str
        """
        return self._datafile

    @datafile.setter
    def datafile(self, datafile):
        """
        Sets the datafile of this FirmwareImageSerializer.
        The binary file of firmware image

        :param datafile: The datafile of this FirmwareImageSerializer.
        :type: str
        """

        self._datafile = datafile

    @property
    def description(self):
        """
        Gets the description of this FirmwareImageSerializer.
        The description of the object

        :return: The description of this FirmwareImageSerializer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this FirmwareImageSerializer.
        The description of the object

        :param description: The description of this FirmwareImageSerializer.
        :type: str
        """

        self._description = description

    @property
    def created_at(self):
        """
        Gets the created_at of this FirmwareImageSerializer.
        The time the object was created

        :return: The created_at of this FirmwareImageSerializer.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this FirmwareImageSerializer.
        The time the object was created

        :param created_at: The created_at of this FirmwareImageSerializer.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def object(self):
        """
        Gets the object of this FirmwareImageSerializer.
        The API resource entity

        :return: The object of this FirmwareImageSerializer.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this FirmwareImageSerializer.
        The API resource entity

        :param object: The object of this FirmwareImageSerializer.
        :type: str
        """

        self._object = object

    @property
    def updated_at(self):
        """
        Gets the updated_at of this FirmwareImageSerializer.
        The time the object was updated

        :return: The updated_at of this FirmwareImageSerializer.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this FirmwareImageSerializer.
        The time the object was updated

        :param updated_at: The updated_at of this FirmwareImageSerializer.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def image_id(self):
        """
        Gets the image_id of this FirmwareImageSerializer.
        DEPRECATED: The ID of the firmware image

        :return: The image_id of this FirmwareImageSerializer.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """
        Sets the image_id of this FirmwareImageSerializer.
        DEPRECATED: The ID of the firmware image

        :param image_id: The image_id of this FirmwareImageSerializer.
        :type: str
        """

        self._image_id = image_id

    @property
    def etag(self):
        """
        Gets the etag of this FirmwareImageSerializer.
        The entity instance signature

        :return: The etag of this FirmwareImageSerializer.
        :rtype: datetime
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """
        Sets the etag of this FirmwareImageSerializer.
        The entity instance signature

        :param etag: The etag of this FirmwareImageSerializer.
        :type: datetime
        """

        self._etag = etag

    @property
    def datafile_checksum(self):
        """
        Gets the datafile_checksum of this FirmwareImageSerializer.
        Checksum generated for the datafile

        :return: The datafile_checksum of this FirmwareImageSerializer.
        :rtype: str
        """
        return self._datafile_checksum

    @datafile_checksum.setter
    def datafile_checksum(self, datafile_checksum):
        """
        Sets the datafile_checksum of this FirmwareImageSerializer.
        Checksum generated for the datafile

        :param datafile_checksum: The datafile_checksum of this FirmwareImageSerializer.
        :type: str
        """

        self._datafile_checksum = datafile_checksum

    @property
    def id(self):
        """
        Gets the id of this FirmwareImageSerializer.
        The ID of the firmware image

        :return: The id of this FirmwareImageSerializer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FirmwareImageSerializer.
        The ID of the firmware image

        :param id: The id of this FirmwareImageSerializer.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this FirmwareImageSerializer.
        The name of the object

        :return: The name of this FirmwareImageSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FirmwareImageSerializer.
        The name of the object

        :param name: The name of this FirmwareImageSerializer.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
