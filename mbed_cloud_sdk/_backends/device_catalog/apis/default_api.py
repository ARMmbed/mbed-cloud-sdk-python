# coding: utf-8

"""
    Device Catalog API

    This is the API Documentation for the mbed device catalog update service.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def device_create(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Create device</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_create(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_create_with_http_info(**kwargs)
        else:
            (data) = self.device_create_with_http_info(**kwargs)
            return data

    def device_create_with_http_info(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Create device</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_create_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_create" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v3/devices{var}'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeviceSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def device_destroy(self, device_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Delete device</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_destroy(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id:  (required)
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_destroy_with_http_info(device_id, **kwargs)
        else:
            (data) = self.device_destroy_with_http_info(device_id, **kwargs)
            return data

    def device_destroy_with_http_info(self, device_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Delete device</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_destroy_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id:  (required)
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `device_destroy`")

        resource_path = '/v3/devices/{device_id}{var}'.replace('{format}', 'json')
        path_params = {}
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeviceSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def device_list(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>List all update devices. The result is paged into pages of 100.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object: 
        :param int limit: 
        :param bool has_more: 
        :param list[str] data: 
        :param str order: 
        :param str after: 
        :param int total_count: 
        :return: list[DeviceSerializer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_list_with_http_info(**kwargs)
        else:
            (data) = self.device_list_with_http_info(**kwargs)
            return data

    def device_list_with_http_info(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>List all update devices. The result is paged into pages of 100.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object: 
        :param int limit: 
        :param bool has_more: 
        :param list[str] data: 
        :param str order: 
        :param str after: 
        :param int total_count: 
        :return: list[DeviceSerializer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object', 'limit', 'has_more', 'data', 'order', 'after', 'total_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v3/devices{var}'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'object' in params:
            query_params['object'] = params['object']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'has_more' in params:
            query_params['has_more'] = params['has_more']
        if 'data' in params:
            query_params['data'] = params['data']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'total_count' in params:
            query_params['total_count'] = params['total_count']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DeviceSerializer]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def device_log_list(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>List all device logs.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_log_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object: 
        :param int limit: 
        :param bool has_more: 
        :param list[str] data: 
        :param str order: 
        :param str after: 
        :param int total_count: 
        :return: list[DeviceLogSerializer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_log_list_with_http_info(**kwargs)
        else:
            (data) = self.device_log_list_with_http_info(**kwargs)
            return data

    def device_log_list_with_http_info(self, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>List all device logs.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_log_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str object: 
        :param int limit: 
        :param bool has_more: 
        :param list[str] data: 
        :param str order: 
        :param str after: 
        :param int total_count: 
        :return: list[DeviceLogSerializer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object', 'limit', 'has_more', 'data', 'order', 'after', 'total_count']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_log_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v3/devicelog{var}'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'object' in params:
            query_params['object'] = params['object']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'has_more' in params:
            query_params['has_more'] = params['has_more']
        if 'data' in params:
            query_params['data'] = params['data']
        if 'order' in params:
            query_params['order'] = params['order']
        if 'after' in params:
            query_params['after'] = params['after']
        if 'total_count' in params:
            query_params['total_count'] = params['total_count']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[DeviceLogSerializer]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def device_log_retrieve(self, device_log_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Retrieve device log.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_log_retrieve(device_log_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_log_id:  (required)
        :return: DeviceLogSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_log_retrieve_with_http_info(device_log_id, **kwargs)
        else:
            (data) = self.device_log_retrieve_with_http_info(device_log_id, **kwargs)
            return data

    def device_log_retrieve_with_http_info(self, device_log_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Retrieve device log.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_log_retrieve_with_http_info(device_log_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_log_id:  (required)
        :return: DeviceLogSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_log_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_log_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_log_id' is set
        if ('device_log_id' not in params) or (params['device_log_id'] is None):
            raise ValueError("Missing the required parameter `device_log_id` when calling `device_log_retrieve`")

        resource_path = '/v3/devicelog/{device_log_id}{var}'.replace('{format}', 'json')
        path_params = {}
        if 'device_log_id' in params:
            path_params['device_log_id'] = params['device_log_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeviceLogSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def device_partial_update(self, device_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Update device fields</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_partial_update(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: The ID of the device (required)
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_partial_update_with_http_info(device_id, **kwargs)
        else:
            (data) = self.device_partial_update_with_http_info(device_id, **kwargs)
            return data

    def device_partial_update_with_http_info(self, device_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Update device fields</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_partial_update_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: The ID of the device (required)
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `device_partial_update`")

        resource_path = '/v3/devices/{device_id}{var}'.replace('{format}', 'json')
        path_params = {}
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeviceSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def device_retrieve(self, device_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Retrieve device.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_retrieve(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id:  (required)
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_retrieve_with_http_info(device_id, **kwargs)
        else:
            (data) = self.device_retrieve_with_http_info(device_id, **kwargs)
            return data

    def device_retrieve_with_http_info(self, device_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Retrieve device.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_retrieve_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id:  (required)
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `device_retrieve`")

        resource_path = '/v3/devices/{device_id}{var}'.replace('{format}', 'json')
        path_params = {}
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeviceSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def device_update(self, device_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Update device.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_update(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: The ID of the device (required)
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.device_update_with_http_info(device_id, **kwargs)
        else:
            (data) = self.device_update_with_http_info(device_id, **kwargs)
            return data

    def device_update_with_http_info(self, device_id, **kwargs):
        """
        
        <p>The APIs for creating and manipulating devices.  </p> <p>Update device.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.device_update_with_http_info(device_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device_id: The ID of the device (required)
        :return: DeviceSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_id' is set
        if ('device_id' not in params) or (params['device_id'] is None):
            raise ValueError("Missing the required parameter `device_id` when calling `device_update`")

        resource_path = '/v3/devices/{device_id}{var}'.replace('{format}', 'json')
        path_params = {}
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['Bearer']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DeviceSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
