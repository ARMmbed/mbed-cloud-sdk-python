# coding: utf-8

"""
    IAM Identities REST API

    REST API to manage accounts, groups, users and api-keys

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UpdatedResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code=None, object=None, request_id=None, message=None, type=None, id=None):
        """
        UpdatedResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'int',
            'object': 'str',
            'request_id': 'str',
            'message': 'str',
            'type': 'str',
            'id': 'str'
        }

        self.attribute_map = {
            'code': 'code',
            'object': 'object',
            'request_id': 'request_id',
            'message': 'message',
            'type': 'type',
            'id': 'id'
        }

        self._code = code
        self._object = object
        self._request_id = request_id
        self._message = message
        self._type = type
        self._id = id

    @property
    def code(self):
        """
        Gets the code of this UpdatedResponse.
        response code

        :return: The code of this UpdatedResponse.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this UpdatedResponse.
        response code

        :param code: The code of this UpdatedResponse.
        :type: int
        """

        self._code = code

    @property
    def object(self):
        """
        Gets the object of this UpdatedResponse.
        entity name: 'user', 'apikey', 'group' or 'account'

        :return: The object of this UpdatedResponse.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this UpdatedResponse.
        entity name: 'user', 'apikey', 'group' or 'account'

        :param object: The object of this UpdatedResponse.
        :type: str
        """
        allowed_values = ["user", "apikey", "group", "account", "list", "error"]
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def request_id(self):
        """
        Gets the request_id of this UpdatedResponse.
        request id

        :return: The request_id of this UpdatedResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this UpdatedResponse.
        request id

        :param request_id: The request_id of this UpdatedResponse.
        :type: str
        """

        self._request_id = request_id

    @property
    def message(self):
        """
        Gets the message of this UpdatedResponse.
        a human readable message with detailed info

        :return: The message of this UpdatedResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this UpdatedResponse.
        a human readable message with detailed info

        :param message: The message of this UpdatedResponse.
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """
        Gets the type of this UpdatedResponse.
        response type: success

        :return: The type of this UpdatedResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this UpdatedResponse.
        response type: success

        :param type: The type of this UpdatedResponse.
        :type: str
        """
        allowed_values = ["success", "created", "accepted", "permanently_deleted", "validation_error", "invalid_token", "access_denied", "account_limit_exceeded", "not_found", "method_not_supported", "duplicate", "precondition_failed", "unsupported_media_type", "rate_limit_exceeded", "internal_server_error", "system_unavailable"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """
        Gets the id of this UpdatedResponse.
        entity id

        :return: The id of this UpdatedResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UpdatedResponse.
        entity id

        :param id: The id of this UpdatedResponse.
        :type: str
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
