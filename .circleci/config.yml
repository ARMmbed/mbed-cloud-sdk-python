jobs:
  build_python_three:
    machine:
      image: circleci/classic:201710-02
    steps:
    - checkout
    - restore_cache:
        keys:
        - v2-python_three-{{ .Branch }}
        paths:
        - ~/caches/app_python_three.tar
    - run:
        command: docker load -i ~/caches/app_python_three.tar || true
        name: Load docker image layer cache
    - run:
        command: docker build --cache-from=mbed_sdk_py3:latest -t mbed_sdk_py3:latest
          -f container/py3.Dockerfile .
        name: Build application docker image
    - run:
        command: mkdir -p ~/caches
        name: Make cache directory
    - run:
        command: docker save -o ~/caches/app_python_three.tar mbed_sdk_py3:latest
        name: Export docker image layer cache
    - save_cache:
        key: v2-python_three-{{ .Branch }}
        paths:
        - ~/caches/app_python_three.tar
    - persist_to_workspace:
        paths: app_python_three.tar
        root: ~/caches
  build_python_two:
    machine:
      image: circleci/classic:201710-02
    steps:
    - checkout
    - restore_cache:
        keys:
        - v2-python_two-{{ .Branch }}
        paths:
        - ~/caches/app_python_two.tar
    - run:
        command: docker load -i ~/caches/app_python_two.tar || true
        name: Load docker image layer cache
    - run:
        command: docker build --cache-from=mbed_sdk_py2:latest -t mbed_sdk_py2:latest
          -f container/py2.Dockerfile .
        name: Build application docker image
    - run:
        command: mkdir -p ~/caches
        name: Make cache directory
    - run:
        command: docker save -o ~/caches/app_python_two.tar mbed_sdk_py2:latest
        name: Export docker image layer cache
    - save_cache:
        key: v2-python_two-{{ .Branch }}
        paths:
        - ~/caches/app_python_two.tar
    - persist_to_workspace:
        paths: app_python_two.tar
        root: ~/caches
  deploy_python_three_live:
    machine:
      image: circleci/classic:201710-02
    steps:
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/app_python_three.tar
        name: Load docker image layer cache
    - run:
        command: docker run --name=SDK mbed_sdk_py3:latest
        name: Start a named container
    - run:
        command: docker cp SDK:/build/built_docs /built_docs
        name: Extract the documentation
    - run:
        command: sudo pip install awscli && aws s3 sync --delete --cache-control max-age=3600
          built_docs s3://mbed-cloud-sdk-python
        name: Upload the documentation
    - run:
        command: docker run mbed_sdk_py3:latest sh -c "source .venv/bin/activate &&
          python scripts/tag_and_release.py https://upload.pypi.org/legacy/"
        name: Tag and release
    - run:
        command: docker run --env SLACK_API_TOKEN mbed_sdk_py3:latest sh -c "source
          .venv/bin/activate && python scripts/notify.py"
        name: Start the release party!
  deploy_python_three_test:
    machine:
      image: circleci/classic:201710-02
    steps:
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/app_python_three.tar
        name: Load docker image layer cache
    - run:
        command: docker run --name=SDK mbed_sdk_py3:latest
        name: Start a named container
    - run:
        command: docker cp SDK:/build/built_docs /built_docs
        name: Extract the documentation
    - run:
        command: sudo pip install awscli && aws s3 sync --delete --cache-control max-age=3600
          built_docs s3://mbed-cloud-sdk-python
        name: Upload the documentation
    - run:
        command: docker run mbed_sdk_py3:latest sh -c "source .venv/bin/activate &&
          python scripts/tag_and_release.py https://test.pypi.org/legacy/"
        name: Tag and release
    - run:
        command: docker run --env SLACK_API_TOKEN mbed_sdk_py3:latest sh -c "source
          .venv/bin/activate && python scripts/notify.py"
        name: Start the release party!
  test_python_three_osii:
    machine:
      image: circleci/classic:201710-02
    steps:
    - checkout
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/app_python_three.tar
        name: Load docker image layer cache
    - run: 'pip install docker-compose==1.21.0

        login="$(aws ecr get-login --no-include-email)"

        ${login}

        '
    - run:
        command: 'export TEST_RUNNER_DEFAULT_API_HOST=${MBED_CLOUD_API_HOST_OS2}

          export TEST_RUNNER_DEFAULT_API_KEY=${MBED_CLOUD_API_KEY_OS2}

          login="$(aws ecr get-login --no-include-email)"

          ${login}

          docker-compose -f container/py3-compose.yml up --exit-code-from=sdk_test_server

          '
        name: Run all tests
        no_output_timeout: 15m
    - run:
        command: python scripts/ci_summary.py --noblock
        name: Generate summary
    - store_artifacts:
        path: results
  test_python_three_production:
    machine:
      image: circleci/classic:201710-02
    steps:
    - checkout
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/app_python_three.tar
        name: Load docker image layer cache
    - run: 'pip install docker-compose==1.21.0

        login="$(aws ecr get-login --no-include-email)"

        ${login}

        '
    - run:
        command: 'export TEST_RUNNER_DEFAULT_API_HOST=${MBED_CLOUD_API_HOST_PROD}

          export TEST_RUNNER_DEFAULT_API_KEY=${MBED_CLOUD_API_KEY_PROD}

          login="$(aws ecr get-login --no-include-email)"

          ${login}

          docker-compose -f container/py3-compose.yml up --exit-code-from=sdk_test_server

          '
        name: Run all tests
        no_output_timeout: 15m
    - run:
        command: python scripts/ci_summary.py --noblock
        name: Generate summary
    - store_artifacts:
        path: results
  test_python_two_osii:
    machine:
      image: circleci/classic:201710-02
    steps:
    - checkout
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/app_python_two.tar
        name: Load docker image layer cache
    - run: 'pip install docker-compose==1.21.0

        login="$(aws ecr get-login --no-include-email)"

        ${login}

        '
    - run:
        command: 'export TEST_RUNNER_DEFAULT_API_HOST=${MBED_CLOUD_API_HOST_OS2}

          export TEST_RUNNER_DEFAULT_API_KEY=${MBED_CLOUD_API_KEY_OS2}

          login="$(aws ecr get-login --no-include-email)"

          ${login}

          docker-compose -f container/py2-compose.yml up --exit-code-from=sdk_test_server

          '
        name: Run all tests
        no_output_timeout: 15m
    - run:
        command: python scripts/ci_summary.py --noblock
        name: Generate summary
    - store_artifacts:
        path: results
  test_python_two_production:
    machine:
      image: circleci/classic:201710-02
    steps:
    - checkout
    - attach_workspace:
        at: ~/caches
    - run:
        command: docker load -i ~/caches/app_python_two.tar
        name: Load docker image layer cache
    - run: 'pip install docker-compose==1.21.0

        login="$(aws ecr get-login --no-include-email)"

        ${login}

        '
    - run:
        command: 'export TEST_RUNNER_DEFAULT_API_HOST=${MBED_CLOUD_API_HOST_PROD}

          export TEST_RUNNER_DEFAULT_API_KEY=${MBED_CLOUD_API_KEY_PROD}

          login="$(aws ecr get-login --no-include-email)"

          ${login}

          docker-compose -f container/py2-compose.yml up --exit-code-from=sdk_test_server

          '
        name: Run all tests
        no_output_timeout: 15m
    - run:
        command: python scripts/ci_summary.py --noblock
        name: Generate summary
    - store_artifacts:
        path: results
  tpip_report:
    docker:
    - image: circleci/python:3.6.1
    steps:
    - checkout
    - run: sudo pip install -e .
    - run: python scripts/tpip.py python_tpip.csv
    - store_artifacts:
        path: python_tpip.csv
version: 2
workflows:
  python_sdk_workflow:
    jobs:
    - build_python_three: {}
    - test_python_three_production:
        requires:
        - build_python_three
    - test_python_three_osii:
        requires:
        - build_python_three
    - release_test:
        requires:
        - test_python_three_osii
        type: approval
    - deploy_python_three_test:
        requires:
        - release_test
    - build_python_two: {}
    - test_python_two_production:
        requires:
        - build_python_two
    - release_live:
        filters:
          branches:
            only: master
        requires:
        - test_python_three_production
        - test_python_two_production
        type: approval
    - deploy_python_three_live:
        requires:
        - release_live
    - test_python_two_osii:
        requires:
        - build_python_two
    - tpip_report: {}
  version: 2
