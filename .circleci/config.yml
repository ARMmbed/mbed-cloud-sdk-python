version: 2
iteration: 7
aliases:
  - &build_cache_key 'v1-{{ .Branch }}-{{ .Revision }}'
  - &branch_cache_key 'v1-{{ .Branch }}'

  - &environ
    RESULTS: ${HOME}/results
    PROJECT_REPORTS: ${HOME}/reports
    DOCS: ${HOME}/docs
    PIPENV_VENV_IN_PROJECT: true
    TESTRUNNER_DOCKER_IMAGE: 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master
    DEPLOY_TARGET: null
    MBED_CLOUD_API_KEY: null
    MBED_CLOUD_API_HOST: null

  - &job_test_common
    steps:
      - setup_remote_docker
      - run: sudo pip install pipenv
      - restore_cache:
          keys: [*build_cache_key]
      - run: |
              echo "{\"api_key\":\"$MBED_CLOUD_API_KEY\", \"host\":\"$MBED_CLOUD_API_HOST\"}" > .mbed_cloud_config.json
              login="$(pipenv run aws ecr get-login)"
              ${login}
              login="$(pipenv run aws ecr get-login --no-include-email)"
              ${login}
              docker pull ${TESTRUNNER_DOCKER_IMAGE}
      - run: pipenv run pytest --tb=short --cov=mbed_cloud --cov-config .coveragerc\
              --cov-report html --cov-report xml --junitxml=~/results/unittests.xml\
              --html=~/results/unittests.html --self-contained-html
      - run: pipenv run python -c "from xml.etree import\
              ElementTree; import json, os; json.dump(\{k:ElementTree.parse(os.path.expanduser(v)).getroot().attrib\
              for k,v in (('integration',r'~/rpc_results/results.xml'),\
              ('unittests',r'~/results/unittests.xml'),\
              ('coverage',r'~/results/coverage.xml'))},\
              open(os.path.expanduser('~/results/summary.json'), 'w'))"
      - store_artifacts:
          path: ${RESULTS}
          destination: ${PYVER}/${CLOUD_VERSION}
      - run: codecov --file=/home/ubuntu/results/coverage.xml -e PYVER,CLOUD_VERSION

  - &step_deploy_common
    run:
      name: Deploy the build
      command: |
              echo 'I would deploy to ${DEPLOY_TARGET}'
              pipenv install twine
              pipenv run python setup.py sdist bdist_wheel
              twine register dist
    # TODO: envvar configuration from https://pypi.python.org/pypi/twine
#    - run: twine upload dist/*
    # TODO: docs upload may need to load from cache
    #- run: aws s3 sync --delete --cache-control max-age=3600 ~/docs s3://mbed-cloud-sdk-python


jobs:
  build:
    environment:
      <<: *environ
    docker:
      - image: circleci/python:3.6.1
    steps:
      - run: sudo pip install pipenv
      - restore_cache:
          keys: [*branch_cache_key]
      - checkout
      - run: pipenv install -r requirements.dev.txt
      - run: pipenv install --skip-lock awscli codecov
      - save_cache:
          key: *build_cache_key
          paths:
            - $CIRCLE_WORKING_DIRECTORY
      - save_cache:
          key: *branch_cache_key
          paths:
            - $CIRCLE_WORKING_DIRECTORY

  tpip_report:
    environment:
      <<: *environ
    docker:
      - image: circleci/python:3.6.1
    steps:
      - restore_cache:
          keys: [*build_cache_key]
      - run: pipenv run python scripts/tpip.py ${PROJECT_REPORTS}/tpip.csv
      - store_artifacts:
          path: ${PROJECT_REPORTS}

  docs_build:
    environment:
      <<: *environ
    docker:
      - image: circleci/python:3.6.1
    steps:
      - restore_cache:
          keys: [*build_cache_key]
      - run: sudo apt-get update
      - run: sudo apt-get install pandoc
      - run: pipenv run sphinx-build -a -b html -c docs/ docs/ ${DOCS}
      - store_artifacts:
          path: ${DOCS}

  test_integration_2:
    <<: *job_test_common
    environment:
      <<: *environ
      MBED_CLOUD_API_HOST: integration
      CLOUD_VERSION: integration
      PYVER: 2
    docker:
      - image: circleci/python:2.7.13

  test_integration_3:
    <<: *job_test_common
    environment:
      <<: *environ
      MBED_CLOUD_API_HOST: integration
      CLOUD_VERSION: integration
      PYVER: 3
    docker:
      - image: circleci/python:3.6.1

  test_production_2:
    <<: *job_test_common
    environment:
      <<: *environ
      MBED_CLOUD_API_HOST: production
      CLOUD_VERSION: production
      PYVER: 2
    docker:
      - image: circleci/python:2.7.13

  test_production_3:
    <<: *job_test_common
    environment:
      <<: *environ
      MBED_CLOUD_API_HOST: production
      CLOUD_VERSION: production
      PYVER: 3
    docker:
      - image: circleci/python:3.6.1

  deploy_beta:
    environment:
      <<: *environ
      DEPLOY_TARGET: testpypi
    docker:
      - image: circleci/python:3.6.1
    steps:
      - *step_deploy_common

  deploy_production:
    environment:
      <<: *environ
      DEPLOY_TARGET: realpypi
    docker:
      - image: circleci/python:3.6.1
    steps:
      - *step_deploy_common

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - tpip_report:
          requires:
            - build
      - test_integration_2:
          requires:
            - build
      - test_integration_3:
          requires:
            - build
      - test_production_2:
          requires:
            - build
      - test_production_3:
          requires:
            - build
      - docs_build:
          requires:
            - test_integration_2
            - test_integration_3
      - release_beta:
          type: approval
          requires:
            - test_integration_2
            - test_integration_3
      - release_production:
          type: approval
          requires:
            - test_production_2
            - test_production_3
          filters:
            branches:
              only: production
      - deploy_beta:
          requires:
            - release_beta
      - deploy_production:
          requires:
            - release_production
