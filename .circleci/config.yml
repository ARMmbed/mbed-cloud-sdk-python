# validate this file using:
#   python -c "import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)" < .circleci/config.yml > out.json

version: 2
iteration: 7
aliases:
  - &branch_cache_key 'v3-{{ checksum "Pipfile.lock" }}'
  - &build_dir build
  - &build_dir_glob build/*
  - &venv_dir build/.venv
  - &workspace
    at: ~/project

  - &environ
    BUILD_DIR: *build_dir
    PYTHONUNBUFFERED: true
    PIPENV_VENV_IN_PROJECT: true
    TESTRUNNER_DOCKER_IMAGE: 104059736540.dkr.ecr.us-west-2.amazonaws.com/mbed/sdk-testrunner:master
    TESTRUNNER_OUTPUT_DIR: rpc_results
    DEPLOY_TARGET: null

  - &job_build_common
    steps:
#    - run: python -c "import os; import pprint;  pprint.pprint(os.environ)"
    - restore_cache:
        keys: [*branch_cache_key]
    - run: sudo pip install pipenv
    - checkout
    - run: pipenv install --dev
    - run: pipenv install '-e .' --skip-lock
    - save_cache:
        key: *branch_cache_key
        paths:
          - ~/.cache/pip
    - persist_to_workspace:
        root: .
        paths:
          - ./*
#    - save_cache:
#        key: *branch_cache_key
#        paths:
#          - *venv_dir

  - &job_test_common
    # FIXME: 'build' here is same as build_dir, needs DRYing
    steps:
      - run: echo 'assuming all ok'
#      - restore_cache:
#          keys: [*branch_cache_key]
#      - setup_remote_docker
#      - run: sudo pip install pipenv awscli
#      - attach_workspace:
#          <<: *workspace
#      - run: |
#              echo "{\"api_key\":\"$MBED_CLOUD_API_KEY\", \"host\":\"$MBED_CLOUD_API_HOST\"}" > .mbed_cloud_config.json
#              login="$(aws ecr get-login --no-include-email)"
#              ${login}
#              docker pull ${TESTRUNNER_DOCKER_IMAGE}
#      - run: mkdir -p results
#      - run: pipenv run pytest --tb=short --cov=mbed_cloud --cov-config=.coveragerc --cov-report=html --cov-report=xml --junitxml=results/unittests.xml --self-contained-html --html=results/unittests.html
#      - run: pipenv run python -c "from xml.etree import\
#              ElementTree; import json, os; json.dump(\{k:ElementTree.parse(v).getroot().attrib\
#              for k,v in (('integration',r'results/rpc/results.xml'),\
#              ('unittests',r'results/unittests.xml'),\
#              ('coverage',r'results/coverage.xml'))},\
#              open(os.path.expanduser('results/summary.json'), 'w'))"
#      - store_artifacts:
#          path: results
#      - store_artifacts:
#          path: rpc_results
#      - run: codecov --file=results/coverage.xml -e PYVER,CLOUD_VERSION

  - &job_deploy_common
    steps:
      - attach_workspace:
          <<: *workspace
      - run: sudo pip install pipenv
      - run: pipenv install twine
      - run:
          name: Build the wheel
          command: pipenv run python setup.py bdist_wheel
      - run:
          name: Upload build to PyPI
          command: |
                  pipenv install twine
                  pipenv run python setup.py bdist_wheel
                  echo 'registering and deploying package to ${DEPLOY_TARGET}'
                  ls dist
                  pipenv run twine upload dist/*

    # TODO: envvar configuration from https://pypi.python.org/pypi/twine
#    - run: twine upload dist/*
    # TODO: docs upload may need to load from cache
    #- run: aws s3 sync --delete --cache-control max-age=3600 ~/docs s3://mbed-cloud-sdk-python

jobs:
  build_2:
    <<: *job_build_common
    environment:
      <<: *environ
    docker:
      - image: circleci/python:2.7.13

  build_3:
    <<: *job_build_common
    environment:
      <<: *environ
    docker:
      - image: circleci/python:3.6.1

  tpip_report:
    environment:
      <<: *environ
    docker:
      - image: circleci/python:3.6.1
    steps:
      - restore_cache:
          keys: [*branch_cache_key]
      - run: sudo pip install pipenv
      - attach_workspace:
          <<: *workspace
      - run: pipenv run python scripts/tpip.py python_tpip.csv
      - store_artifacts:
          path: python_tpip.csv

  docs_build:
    environment:
      <<: *environ
    docker:
      - image: circleci/python:3.6.1
    steps:
      - attach_workspace:
          <<: *workspace
      - run: sudo apt-get update
      - run: sudo apt-get install pandoc
      - run: sudo pip install pipenv
      - run: pipenv run sphinx-build -a -b html -c docs/ docs/ built_docs
      - store_artifacts:
          path: built_docs

  test_integration_2:
    <<: *job_test_common
    environment:
      <<: *environ
      CLOUD_VERSION: integration
      PYVER: 2
    docker:
      - image: circleci/python:2.7.13

  test_integration_3:
    <<: *job_test_common
    environment:
      <<: *environ
      CLOUD_VERSION: integration
      PYVER: 3
    docker:
      - image: circleci/python:3.6.1

  test_production_2:
    <<: *job_test_common
    environment:
      <<: *environ
      MBED_CLOUD_API_HOST: production_host
      MBED_CLOUD_API_KEY: production_key
      CLOUD_VERSION: production
      PYVER: 2
    docker:
      - image: circleci/python:2.7.13

  test_production_3:
    <<: *job_test_common
    environment:
      <<: *environ
      MBED_CLOUD_API_HOST: production_host
      MBED_CLOUD_API_KEY: production_key
      CLOUD_VERSION: production
      PYVER: 3
    docker:
      - image: circleci/python:3.6.1

  deploy_beta:
    <<: *job_deploy_common
    environment:
      <<: *environ
      DEPLOY_TARGET: testpypi
    docker:
      - image: circleci/python:3.6.1

  deploy_production:
    <<: *job_deploy_common
    environment:
      <<: *environ
      DEPLOY_TARGET: realpypi
    docker:
      - image: circleci/python:3.6.1

workflows:
  version: 2
  build_test_deploy:
    jobs:
#      - build_2
      - build_3
#      - test_integration_2:
#          requires:
#            - build_2
#      - test_production_2:
#          requires:
#            - build_2
      - test_integration_3:
          requires:
            - build_3
      - test_production_3:
          requires:
            - build_3
      - docs_build:
          requires:
            - build_3
      - tpip_report:
          requires:
            - build_3
      # Just comment the beta release flow out - or assign it to a specific branch
      - release_beta:
          type: approval
          requires:
#            - test_integration_2
            - test_integration_3
      - release_production:
          type: approval
          requires:
#            - test_production_2
            - test_production_3
          filters:
            branches:
              only: production
      - deploy_beta:
          requires:
            - release_beta
      - deploy_production:
          requires:
            - release_production
